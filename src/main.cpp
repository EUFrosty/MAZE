#include "imgui.h"
#include "imgui_impl_glfw.h"
#include "imgui_impl_opengl3.h"
#include "rg/Error.h"

#include <glad/glad.h>
#include <GLFW/glfw3.h>

#include <glm/glm.hpp>
#include <glm/gtc/matrix_transform.hpp>
#include <glm/gtc/type_ptr.hpp>

#include <learnopengl/filesystem.h>
#include <learnopengl/shader.h>
#include <learnopengl/camera.h>
#include <learnopengl/model.h>

#include <iostream>

void framebuffer_size_callback(GLFWwindow *window, int width, int height);

void mouse_callback(GLFWwindow *window, double xpos, double ypos);

void scroll_callback(GLFWwindow *window, double xoffset, double yoffset);

void processInput(GLFWwindow *window);

void key_callback(GLFWwindow *window, int key, int scancode, int action, int mods);

unsigned int loadCubemap(vector<std::string> faces);

unsigned int loadTexture(const char *path);

// settings
const unsigned int SCR_WIDTH = 800;
const unsigned int SCR_HEIGHT = 800;

// timing
float deltaTime = 0.0f;
float lastFrame = 0.0f;

bool blinn = false;
bool blinnKeyPressed = false;

glm::vec3 cameraPos = glm::vec3(-0.125, -0.8725, 1.0);

struct PointLight {
    glm::vec3 position;
    glm::vec3 specular;

    float constant;
    float linear;
    float quadratic;
};

struct ProgramState {
    float ambientRed = 0.0f;
    float ambientGreen = 0.0f;
    float ambientBlue = 0.0f;
    bool ImGuiEnabled = false;
    Camera camera;
    bool CameraMouseMovementUpdateEnabled = true;

    ProgramState()
            : camera(cameraPos) {}

    void SaveToFile(std::string filename);

    void LoadFromFile(std::string filename);
};

void ProgramState::SaveToFile(std::string filename) {
    std::ofstream out(filename);
    out << ambientRed << '\n'
        << ambientGreen << '\n'
        << ambientBlue << '\n'
        << ImGuiEnabled << '\n';
}

void ProgramState::LoadFromFile(std::string filename) {
    std::ifstream in(filename);
    if (in) {
        in >> ambientRed
           >> ambientGreen
           >> ambientBlue
           >> ImGuiEnabled;
    }
}

ProgramState *programState;

void DrawImGui(ProgramState* programState);
void update(GLFWwindow* window);

glm::mat4 modelIgraca = glm::mat4(1.0f);

float lastX = 800.0f / 2.0f;
float lastY = 800.0f / 2.0f;
bool firstMouse = true;

glm::vec3 lightPos(-0.125f, -0.8725f, 1.045f);

int main() {
    glfwInit();

    glfwWindowHint(GLFW_CONTEXT_VERSION_MAJOR, 3);
    glfwWindowHint(GLFW_CONTEXT_VERSION_MINOR, 3);
    glfwWindowHint(GLFW_OPENGL_PROFILE, GLFW_OPENGL_CORE_PROFILE);

    GLFWwindow* window=glfwCreateWindow(800, 800, "Maze Game", nullptr, nullptr);
    if (window==nullptr){
        std::cout << "Failed to create window!\n";
        glfwTerminate();
        return EXIT_FAILURE;
    }

#ifdef __APPLE__
    glfwWindowHint(GLFW_OPENGL_FORWARD_COMPAT, GL_TRUE);
#endif

    glfwMakeContextCurrent(window);
    glfwSetFramebufferSizeCallback(window, framebuffer_size_callback);
    glfwSetCursorPosCallback(window, mouse_callback);
    glfwSetScrollCallback(window, scroll_callback);

    glfwSetKeyCallback(window, key_callback);



    if (!gladLoadGLLoader((GLADloadproc)glfwGetProcAddress)) {
        std::cout << "Failed to init GLAD\n";
        glfwTerminate();
        return EXIT_FAILURE;
    }

    IMGUI_CHECKVERSION();
    ImGui::CreateContext();
    ImGuiIO& io = ImGui::GetIO(); (void)io;

    ImGui::StyleColorsDark();

    ImGui_ImplGlfw_InitForOpenGL(window, true);
    ImGui_ImplOpenGL3_Init("#version 330 core");

    programState = new ProgramState;
    programState->LoadFromFile("resources/programState.txt");

    if(programState->ImGuiEnabled){
        glfwSetInputMode(window, GLFW_CURSOR, GLFW_CURSOR_NORMAL);
    }else{
        glfwSetInputMode(window, GLFW_CURSOR, GLFW_CURSOR_DISABLED);
    }

    glEnable(GL_DEPTH_TEST);
    glEnable(GL_CULL_FACE);
    glCullFace(GL_BACK);

    Shader shader("resources/shaders/vertexShader.vs", "resources/shaders/fragmentShader.fs");
    Shader shader1("resources/shaders/vertexShaderBottom.vs", "resources/shaders/fragmentShaderBottom.fs");
    Shader shader2("resources/shaders/lightCubevs.vs", "resources/shaders/lightCubefs.fs");
    Shader shader3("resources/shaders/vertexShader.vs", "resources/shaders/fragmentShader.fs");
    Model ourModel("resources/objects/flashlight/Linterna.obj");
    Shader shaderModel("resources/shaders/Model.vs", "resources/shaders/Model.fs");
    Shader skyboxShader("/home/wei/Desktop/ProjekatRG/RG/resources/shaders/skybox.vs", "/home/wei/Desktop/ProjekatRG/RG/resources/shaders/skybox.fs");
    Shader shaderBlending("resources/shaders/blending1.vs", "resources/shaders/blending1.fs");

    float verticesMaze[]={
            //okvirna 4 zida
            //levi:
            -1.01, -1.0, 0.0, -1.0, 0.0, 0.0, 7.0, -1.0,
            -1.01, -1.0, 0.3, -1.0, 0.0, 0.0, 7.0, 1.0,
            -1.01, 1.0, 0.0, -1.0, 0.0, 0.0, -1.0, -1.0,
            -1.01, 1.0, 0.3, -1.0, 0.0, 0.0, -1.0, 1.0,

            -1.01, 1.0, 0.0, 0.0, 1.0, 0.0, 1.0, -1.0,
            -1.01, 1.0, 0.3, 0.0, 1.0, 0.0, 1.0, 1.0,
            -0.99, 1.0, 0.0, 0.0, 1.0, 0.0, -1.0, -1.0,
            -0.99, 1.0, 0.3, 0.0, 1.0, 0.0, -1.0, 1.0,

            -0.99, 1.0, 0.0, 1.0, 0.0, 0.0,7.0, -1.0,
            -0.99, 1.0, 0.3, 1.0, 0.0, 0.0,7.0, 1.0,
            -0.99, -1.0, 0.0, 1.0, 0.0, 0.0,-1.0, -1.0,
            -0.99, -1.0, 0.3, 1.0, 0.0, 0.0,-1.0, 1.0,

            -0.99, -1.0, 0.0, 0.0, -1.0, 0.0,1.0, -1.0,
            -0.99, -1.0, 0.3, 0.0, -1.0, 0.0,1.0, 1.0,
            -1.01, -1.0, 0.0, 0.0, -1.0, 0.0,-1.0, -1.0,
            -1.01, -1.0, 0.3, 0.0, -1.0, 0.0,-1.0, 1.0,

            -1.01, -1.0, 0.3, 0.0, 0.0, 1.0, 7.0, -1.0,
            -1.01, 1.0, 0.3, 0.0, 0.0, 1.0, -1.0, -1.0,
            -0.99, -1.0, 0.3, 0.0, 0.0, 1.0, 7.0, -0.75,
            -0.99, 1.0, 0.3, 0.0, 0.0, 1.0, -1.0, -0.75,

            //gornji:
            -1.0, 1.01, 0.0, 0.0, 1.0, 0.0, 7.0, -1.0,
            -1.0, 1.01, 0.3, 0.0, 1.0, 0.0, 7.0, 1.0,
            1.0, 1.01, 0.0, 0.0, 1.0, 0.0, -1.0, -1.0,
            1.0, 1.01, 0.3, 0.0, 1.0, 0.0, -1.0, 1.0,

            1.0, 1.01, 0.0, 1.0, 0.0, 0.0, 1.0, -1.0,
            1.0, 1.01, 0.3, 1.0, 0.0, 0.0, 1.0, 1.0,
            1.0, 0.99, 0.0, 1.0, 0.0, 0.0, -1.0, -1.0,
            1.0, 0.99, 0.3, 1.0, 0.0, 0.0, -1.0, 1.0,

            1.0, 0.99, 0.0, 0.0, -1.0, 0.0,7.0, -1.0,
            1.0, 0.99, 0.3, 0.0, -1.0, 0.0,7.0, 1.0,
            -1.0, 0.99, 0.0, 0.0, -1.0, 0.0,-1.0, -1.0,
            -1.0, 0.99, 0.3, 0.0, -1.0, 0.0,-1.0, 1.0,

            -1.0, 0.99, 0.0, -1.0, 0.0, 0.0, 1.0, -1.0,
            -1.0, 0.99, 0.3, -1.0, 0.0, 0.0, 1.0, 1.0,
            -1.0, 1.01, 0.0, -1.0, 0.0, 0.0, -1.0, -1.0,
            -1.0, 1.01, 0.3, -1.0, 0.0, 0.0, -1.0, 1.0,

            -1.0, 1.01, 0.3, 0.0, 0.0, 1.0, 7.0, -1.0,
            1.0, 1.01, 0.3, 0.0, 0.0, 1.0, -1.0, -1.0,
            -1.0, 0.99, 0.3, 0.0, 0.0, 1.0, 7.0, -0.750,
            1.0, 0.99, 0.3, 0.0, 0.0, 1.0, -1.0, -0.75,

            //desni:
            1.01, -1.0, 0.0, 0.0, 1.0, 0.0, 7.0, -1.0,
            1.01, -1.0, 0.3, 0.0, 1.0, 0.0, 7.0, 1.0,
            1.01, 1.0, 0.0, 0.0, 1.0, 0.0, -1.0, -1.0,
            1.01, 1.0, 0.3, 0.0, 1.0, 0.0, -1.0, 1.0,

            1.01, 1.0, 0.0, 0.0, 1.0, 0.0, 1.0, -1.0,
            1.01, 1.0, 0.3, 0.0, 1.0, 0.0, 1.0, 1.0,
            0.99, 1.0, 0.0, 0.0, 1.0, 0.0, -1.0, -1.0,
            0.99, 1.0, 0.3, 0.0, 1.0, 0.0, -1.0, 1.0,

            0.99, 1.0, 0.0, -1.0, 0.0, 0.0, 7.0, -1.0,
            0.99, 1.0, 0.3, -1.0, 0.0, 0.0, 7.0, 1.0,
            0.99, -1.0, 0.0, -1.0, 0.0, 0.0, -1.0, -1.0,
            0.99, -1.0, 0.3, -1.0, 0.0, 0.0, -1.0, 1.0,

            0.99, -1.0, 0.0, 0.0, -1.0, 0.0, 1.0, -1.0,
            0.99, -1.0, 0.3, 0.0, -1.0, 0.0, 1.0, 1.0,
            1.01, -1.0, 0.0, 0.0, -1.0, 0.0, -1.0, -1.0,
            1.01, -1.0, 0.3, 0.0, -1.0, 0.0, -1.0, 1.0,

            1.01, -1.0, 0.3, 0.0, 0.0, 1.0, 7.0, -1.0,
            1.01, 1.0, 0.3, 0.0, 0.0, 1.0, -1.0, -1.0,
            0.99, -1.0, 0.3, 0.0, 0.0, 1.0, 7.0, -0.750,
            0.99, 1.0, 0.3, 0.0, 0.0, 1.0, -1.0, -0.750,

            //donji:
            -1.0, -1.01, 0.0, 0.0, 0.0, -1.0, 7.0, -1.0,
            -1.0, -1.01, 0.3, 0.0, 0.0, -1.0, 7.0, 1.0,
            1.0, -1.01, 0.0, 0.0, 0.0, -1.0, -1.0, -1.0,
            1.0, -1.01, 0.3, 0.0, 0.0, -1.0, -1.0, 1.0,

            1.0, -1.01, 0.0, 1.0, 0.0, 0.0, 1.0, -1.0,
            1.0, -1.01, 0.3, 1.0, 0.0, 0.0, 1.0, 1.0,
            1.0, -0.99, 0.0, 1.0, 0.0, 0.0, -1.0, -1.0,
            1.0, -0.99, 0.3, 1.0, 0.0, 0.0, -1.0, 1.0,

            1.0, -0.99, 0.0, 0.0, 1.0, 0.0, 7.0, -1.0,
            1.0, -0.99, 0.3, 0.0, 1.0, 0.0, 7.0, 1.0,
            -1.0, -0.99, 0.0, 0.0, 1.0, 0.0, -1.0, -1.0,
            -1.0, -0.99, 0.3, 0.0, 1.0, 0.0, -1.0, 1.0,

            -1.0, -0.99, 0.0, -1.0, 0.0, 0.0, 1.0, -1.0,
            -1.0, -0.99, 0.3, -1.0, 0.0, 0.0, 1.0, 1.0,
            -1.0, -1.01, 0.0, -1.0, 0.0, 0.0, -1.0, -1.0,
            -1.0, -1.01, 0.3, -1.0, 0.0, 0.0, -1.0, 1.0,

            -1.0, -1.01, 0.3, 0.0, 0.0, 1.0, 7.0, -1.0,
            1.0, -1.01, 0.3, 0.0, 0.0, 1.0, -1.0, -1.0,
            -1.0, -0.99, 0.3, 0.0, 0.0, 1.0, 7.0, -0.750,
            1.0, -0.99, 0.3, 0.0, 0.0, 1.0, -1.0, -0.750,

            //unutrasnji vertikalni zidovi(ima ih 14):
            //prvi:
            -0.76, -0.75, 0.0, -1.0, 0.0, 0.0, 2.0, -1.0,
            -0.76, -0.75, 0.3, -1.0, 0.0, 0.0, 2.0, 1.0,
            -0.76, -0.25, 0.0, -1.0, 0.0, 0.0, -1.0, -1.0,
            -0.76, -0.25, 0.3, -1.0, 0.0, 0.0, -1.0, 1.0,

            -0.76, -0.25, 0.0, 0.0, 1.0, 0.0, 1.0, -1.0,
            -0.76, -0.25, 0.3, 0.0, 1.0, 0.0, 1.0, 1.0,
            -0.74, -0.25, 0.0, 0.0, 1.0, 0.0, -1.0, -1.0,
            -0.74, -0.25, 0.3, 0.0, 1.0, 0.0, -1.0, 1.0,

            -0.74, -0.25, 0.0, 1.0, 0.0, 0.0, 2.0, -1.0,
            -0.74, -0.25, 0.3, 1.0, 0.0, 0.0, 2.0, 1.0,
            -0.74, -0.75, 0.0, 1.0, 0.0, 0.0, -1.0, -1.0,
            -0.74, -0.75, 0.3, 1.0, 0.0, 0.0, -1.0, 1.0,

            -0.74, -0.75, 0.0, 0.0, -1.0, 0.0, 1.0, -1.0,
            -0.74, -0.75, 0.3, 0.0, -1.0, 0.0, 1.0, 1.0,
            -0.76, -0.75, 0.0, 0.0, -1.0, 0.0, -1.0, -1.0,
            -0.76, -0.75, 0.3, 0.0, -1.0, 0.0, -1.0, 1.0,

            -0.76, -0.75, 0.3, 0.0, 0.0, 1.0, 2.0, -1.0,
            -0.76, -0.25, 0.3, 0.0, 0.0, 1.0, -1.0, -1.0,
            -0.74, -0.75, 0.3, 0.0, 0.0, 1.0, 2.0, -0.75,
            -0.74, -0.25, 0.3, 0.0, 0.0, 1.0, -1.0, -0.75,

            //drugi:
            -0.76, 0.0, 0.0, -1.0, 0.0, 0.0, 1.0, -1.0,
            -0.76, 0.0, 0.3, -1.0, 0.0, 0.0, 1.0, 1.0,
            -0.76, 0.25, 0.0, -1.0, 0.0, 0.0, -1.0, -1.0,
            -0.76, 0.25, 0.3, -1.0, 0.0, 0.0, -1.0, 1.0,

            -0.76, 0.25, 0.0, 0.0, 1.0, 0.0, 1.0, -1.0,
            -0.76, 0.25, 0.3, 0.0, 1.0, 0.0, 1.0, 1.0,
            -0.74, 0.25, 0.0, 0.0, 1.0, 0.0, -1.0, -1.0,
            -0.74, 0.25, 0.3, 0.0, 1.0, 0.0, -1.0, 1.0,

            -0.74, 0.25, 0.0, 1.0, 0.0, 0.0, 1.0, -1.0,
            -0.74, 0.25, 0.3, 1.0, 0.0, 0.0, 1.0, 1.0,
            -0.74, 0.0, 0.0, 1.0, 0.0, 0.0, -1.0, -1.0,
            -0.74, 0.0, 0.3, 1.0, 0.0, 0.0, -1.0, 1.0,

            -0.74, 0.0, 0.0, 0.0, -1.0, 0.0, 1.0, -1.0,
            -0.74, 0.0, 0.3, 0.0, -1.0, 0.0, 1.0, 1.0,
            -0.76, 0.0, 0.0, 0.0, -1.0, 0.0, -1.0, -1.0,
            -0.76, 0.0, 0.3, 0.0, -1.0, 0.0, -1.0, 1.0,

            -0.76, 0.0, 0.3, 0.0, 0.0, 1.0, 1.0, -1.0,
            -0.76, 0.25, 0.3, 0.0, 0.0, 1.0, -1.0, -1.0,
            -0.74, 0.0, 0.3, 0.0, 0.0, 1.0, 1.0, -0.75,
            -0.74, 0.25, 0.3, 0.0, 0.0, 1.0, -1.0, -0.75,

            //treci:
            -0.76, 0.5, 0.0, -1.0, 0.0, 0.0, 1.0, -1.0,
            -0.76, 0.5, 0.3, -1.0, 0.0, 0.0, 1.0, 1.0,
            -0.76, 0.75, 0.0, -1.0, 0.0, 0.0, -1.0, -1.0,
            -0.76, 0.75, 0.3, -1.0, 0.0, 0.0, -1.0, 1.0,

            -0.76, 0.75, 0.0, 0.0, 1.0, 0.0, 1.0, -1.0,
            -0.76, 0.75, 0.3, 0.0, 1.0, 0.0, 1.0, 1.0,
            -0.74, 0.75, 0.0, 0.0, 1.0, 0.0, -1.0, -1.0,
            -0.74, 0.75, 0.3, 0.0, 1.0, 0.0, -1.0, 1.0,

            -0.74, 0.75, 0.0, 1.0, 0.0, 0.0, 1.0, -1.0,
            -0.74, 0.75, 0.3, 1.0, 0.0, 0.0,  1.0, 1.0,
            -0.74, 0.5, 0.0, 1.0, 0.0, 0.0, -1.0, -1.0,
            -0.74, 0.5, 0.3, 1.0, 0.0, 0.0, -1.0, 1.0,

            -0.74, 0.5, 0.0, 0.0, -1.0, 0.0, 1.0, -1.0,
            -0.74, 0.5, 0.3, 0.0, -1.0, 0.0, 1.0, 1.0,
            -0.76, 0.5, 0.0, 0.0, -1.0, 0.0, -1.0, -1.0,
            -0.76, 0.5, 0.3, 0.0, -1.0, 0.0, -1.0, 1.0,

            -0.76, 0.5, 0.3, 0.0, 0.0, 1.0, 1.0, -1.0,
            -0.76, 0.75, 0.3, 0.0, 0.0, 1.0, -1.0, -1.0,
            -0.74, 0.5, 0.3, 0.0, 0.0, 1.0, 1.0, -0.75,
            -0.74, 0.75, 0.3, 0.0, 0.0, 1.0, -1.0, -0.75,

            //cetvrti:
            -0.51, -0.75, 0.0, -1.0, 0.0, 0.0, 3.0, -1.0,
            -0.51, -0.75, 0.3, -1.0, 0.0, 0.0, 3.0, 1.0,
            -0.51, 0.0, 0.0, -1.0, 0.0, 0.0, -1.0, -1.0,
            -0.51, 0.0, 0.3, -1.0, 0.0, 0.0, -1.0, 1.0,

            -0.51, 0.0, 0.0, 0.0, 1.0, 0.0, 1.0, -1.0,
            -0.51, 0.0, 0.3, 0.0, 1.0, 0.0, 1.0, 1.0,
            -0.49, 0.0, 0.0, 0.0, 1.0, 0.0, -1.0, -1.0,
            -0.49, 0.0, 0.3, 0.0, 1.0, 0.0, -1.0, 1.0,

            -0.49, 0.0, 0.0, 1.0, 0.0, 0.0,  3.0, -1.0,
            -0.49, 0.0, 0.3, 1.0, 0.0, 0.0,  3.0, 1.0,
            -0.49, -0.75, 0.0, 1.0, 0.0, 0.0,  -1.0, -1.0,
            -0.49, -0.75, 0.3, 1.0, 0.0, 0.0,  -1.0, 1.0,

            -0.49, -0.75, 0.0, 0.0, -1.0, 0.0, 1.0, -1.0,
            -0.49, -0.75, 0.3, 0.0, -1.0, 0.0, 1.0, 1.0,
            -0.51, -0.75, 0.0, 0.0, -1.0, 0.0, -1.0, -1.0,
            -0.51, -0.75, 0.3, 0.0, -1.0, 0.0, -1.0, 1.0,

            -0.51, -0.75, 0.3, 0.0, 0.0, 1.0, 3.0, -1.0,
            -0.51, 0.0, 0.3, 0.0, 0.0, 1.0, -1.0, -1.0,
            -0.49, -0.75, 0.3, 0.0, 0.0, 1.0, 3.0, -0.75,
            -0.49, 0.0, 0.3, 0.0, 0.0, 1.0, -1.0, -0.75,

            //peti:
            -0.51, 0.75, 0.0, -1.0, 0.0, 0.0, 1.0, -1.0,
            -0.51, 0.75, 0.3, -1.0, 0.0, 0.0, 1.0, 1.0,
            -0.51, 1.0, 0.0, -1.0, 0.0, 0.0, -1.0, -1.0,
            -0.51, 1.0, 0.3, -1.0, 0.0, 0.0, -1.0, 1.0,

            -0.51, 1.0, 0.0, 0.0, 1.0, 0.0, 1.0, -1.0,
            -0.51, 1.0, 0.3, 0.0, 1.0, 0.0, 1.0, 1.0,
            -0.49, 1.0, 0.0, 0.0, 1.0, 0.0, -1.0, -1.0,
            -0.49, 1.0, 0.3, 0.0, 1.0, 0.0, -1.0, 1.0,

            -0.49, 1.0, 0.0, 1.0, 0.0, 0.0,  1.0, -1.0,
            -0.49, 1.0, 0.3, 1.0, 0.0, 0.0,  1.0, 1.0,
            -0.49, 0.75, 0.0, 1.0, 0.0, 0.0,  -1.0, -1.0,
            -0.49, 0.75, 0.3, 1.0, 0.0, 0.0,  -1.0, 1.0,

            -0.49, 0.75, 0.0, 0.0, -1.0, 0.0, 1.0, -1.0,
            -0.49, 0.75, 0.3, 0.0, -1.0, 0.0, 1.0, 1.0,
            -0.51, 0.75, 0.0, 0.0, -1.0, 0.0, -1.0, -1.0,
            -0.51, 0.75, 0.3, 0.0, -1.0, 0.0, -1.0, 1.0,

            -0.51, 0.75, 0.3, 0.0, 0.0, 1.0, 1.0, -1.0,
            -0.51, 1.0, 0.3, 0.0, 0.0, 1.0, -1.0, -1.0,
            -0.49, 0.75, 0.3, 0.0, 0.0, 1.0, 1.0, -0.75,
            -0.49, 1.0, 0.3, 0.0, 0.0, 1.0, -1.0, -0.75,

            //sesti:
            -0.26, -1.0, 0.0, -1.0, 0.0, 0.0, 1.0, -1.0,
            -0.26, -1.0, 0.3, -1.0, 0.0, 0.0, 1.0, 1.0,
            -0.26, -0.75, 0.0, -1.0, 0.0, 0.0, -1.0, -1.0,
            -0.26, -0.75, 0.3, -1.0, 0.0, 0.0, -1.0, 1.0,

            -0.26, -0.75, 0.0, 0.0, 1.0, 0.0, 1.0, -1.0,
            -0.26, -0.75, 0.3, 0.0, 1.0, 0.0, 1.0, 1.0,
            -0.24, -0.75, 0.0, 0.0, 1.0, 0.0, -1.0, -1.0,
            -0.24, -0.75, 0.3, 0.0, 1.0, 0.0, -1.0, 1.0,

            -0.24, -0.75, 0.0, 1.0, 0.0, 0.0,  1.0, -1.0,
            -0.24, -0.75, 0.3, 1.0, 0.0, 0.0,  1.0, 1.0,
            -0.24, -1.0, 0.0, 1.0, 0.0, 0.0,  -1.0, -1.0,
            -0.24, -1.0, 0.3, 1.0, 0.0, 0.0,  -1.0, 1.0,

            -0.24, -1.0, 0.0, 0.0, -1.0, 0.0, 1.0, -1.0,
            -0.24, -1.0, 0.3, 0.0, -1.0, 0.0, 1.0, 1.0,
            -0.26, -1.0, 0.0, 0.0, -1.0, 0.0, -1.0, -1.0,
            -0.26, -1.0, 0.3, 0.0, -1.0, 0.0, -1.0, 1.0,

            -0.26, -1.0, 0.3, 0.0, 0.0, 1.0, 1.0, -1.0,
            -0.26, -0.75, 0.3, 0.0, 0.0, 1.0, -1.0, -1.0,
            -0.24, -1.0, 0.3, 0.0, 0.0, 1.0, 1.0, -0.75,
            -0.24, -0.75, 0.3, 0.0, 0.0, 1.0, -1.0, -0.75,

            //sedmi:
            -0.26, -0.5, 0.0, -1.0, 0.0, 0.0, 2.0, -1.0,
            -0.26, -0.5, 0.3, -1.0, 0.0, 0.0, 2.0, 1.0,
            -0.26, 0.0, 0.0, -1.0, 0.0, 0.0, -1.0, -1.0,
            -0.26, 0.0, 0.3, -1.0, 0.0, 0.0, -1.0, 1.0,

            -0.26, 0.0, 0.0, 0.0, 1.0, 0.0, 1.0, -1.0,
            -0.26, 0.0, 0.3, 0.0, 1.0, 0.0, 1.0, 1.0,
            -0.24, 0.0, 0.0, 0.0, 1.0, 0.0, -1.0, -1.0,
            -0.24, 0.0, 0.3, 0.0, 1.0, 0.0, -1.0, 1.0,

            -0.24, 0.0, 0.0, 1.0, 0.0, 0.0,  2.0, -1.0,
            -0.24, 0.0, 0.3, 1.0, 0.0, 0.0,  2.0, 1.0,
            -0.24, -0.5, 0.0, 1.0, 0.0, 0.0,  -1.0, -1.0,
            -0.24, -0.5, 0.3, 1.0, 0.0, 0.0,  -1.0, 1.0,

            -0.24, -0.5, 0.0, 0.0, -1.0, 0.0, 1.0, -1.0,
            -0.24, -0.5, 0.3, 0.0, -1.0, 0.0, 1.0, 1.0,
            -0.26, -0.5, 0.0, 0.0, -1.0, 0.0, -1.0, -1.0,
            -0.26, -0.5, 0.3, 0.0, -1.0, 0.0, -1.0, 1.0,

            -0.26, -0.5, 0.3, 0.0, 0.0, 1.0, 2.0, -1.0,
            -0.26, 0.0, 0.3, 0.0, 0.0, 1.0, -1.0, -1.0,
            -0.24, -0.5, 0.3, 0.0, 0.0, 1.0, 2.0, -0.75,
            -0.24, 0.0, 0.3, 0.0, 0.0, 1.0, -1.0, -0.75,

            //osmi:
            -0.26, 0.5, 0.0, -1.0, 0.0, 0.0, 1.0, -1.0,
            -0.26, 0.5, 0.3, -1.0, 0.0, 0.0, 1.0, 1.0,
            -0.26, 0.75, 0.0, -1.0, 0.0, 0.0, -1.0, -1.0,
            -0.26, 0.75, 0.3, -1.0, 0.0, 0.0, -1.0, 1.0,

            -0.26, 0.75, 0.0, 0.0, 1.0, 0.0, 1.0, -1.0,
            -0.26, 0.75, 0.3, 0.0, 1.0, 0.0, 1.0, 1.0,
            -0.24, 0.75, 0.0, 0.0, 1.0, 0.0, -1.0, -1.0,
            -0.24, 0.75, 0.3, 0.0, 1.0, 0.0, -1.0, 1.0,

            -0.24, 0.75, 0.0, 1.0, 0.0, 0.0,  1.0, -1.0,
            -0.24, 0.75, 0.3, 1.0, 0.0, 0.0,  1.0, 1.0,
            -0.24, 0.5, 0.0, 1.0, 0.0, 0.0,  -1.0, -1.0,
            -0.24, 0.5, 0.3, 1.0, 0.0, 0.0,  -1.0, 1.0,

            -0.24, 0.5, 0.0, 0.0, -1.0, 0.0, 1.0, -1.0,
            -0.24, 0.5, 0.3, 0.0, -1.0, 0.0, 1.0, 1.0,
            -0.26, 0.5, 0.0, 0.0, -1.0, 0.0, -1.0, -1.0,
            -0.26, 0.5, 0.3, 0.0, -1.0, 0.0, -1.0, 1.0,

            -0.26, 0.5, 0.3, 0.0, 0.0, 1.0, 1.0, -1.0,
            -0.26, 0.75, 0.3, 0.0, 0.0, 1.0, -1.0, -1.0,
            -0.24, 0.5, 0.3, 0.0, 0.0, 1.0, 1.0, -0.75,
            -0.24, 0.75, 0.3, 0.0, 0.0, 1.0, -1.0, -0.75,

            //deveti:
            -0.01, -1.0, 0.0, -1.0, 0.0, 0.0, 1.0, -1.0,
            -0.01, -1.0, 0.3, -1.0, 0.0, 0.0, 1.0, 1.0,
            -0.01, -0.75, 0.0, -1.0, 0.0, 0.0, -1.0, -1.0,
            -0.01, -0.75, 0.3, -1.0, 0.0, 0.0, -1.0, 1.0,

            -0.01, -0.75, 0.0, 0.0, 1.0, 0.0, 1.0, -1.0,
            -0.01, -0.75, 0.3, 0.0, 1.0, 0.0, 1.0, 1.0,
            0.01, -0.75, 0.0, 0.0, 1.0, 0.0, -1.0, -1.0,
            0.01, -0.75, 0.3, 0.0, 1.0, 0.0, -1.0, 1.0,

            0.01, -0.75, 0.0, 1.0, 0.0, 0.0,  1.0, -1.0,
            0.01, -0.75, 0.3, 1.0, 0.0, 0.0,  1.0, 1.0,
            0.01, -1.0, 0.0, 1.0, 0.0, 0.0,  -1.0, -1.0,
            0.01, -1.0, 0.3, 1.0, 0.0, 0.0,  -1.0, 1.0,

            0.01, -1.0, 0.0, 0.0, -1.0, 0.0, 1.0, -1.0,
            0.01, -1.0, 0.3, 0.0, -1.0, 0.0, 1.0, 1.0,
            -0.01, -1.0, 0.0, 0.0, -1.0, 0.0, -1.0, -1.0,
            -0.01, -1.0, 0.3, 0.0, -1.0, 0.0, -1.0, 1.0,

            -0.01, -1.0, 0.3, 0.0, 0.0, 1.0, 1.0, -1.0,
            -0.01, -0.75, 0.3, 0.0, 0.0, 1.0, -1.0, -1.0,
            0.01, -1.0, 0.3, 0.0, 0.0, 1.0, 1.0, -0.75,
            0.01, -0.75, 0.3, 0.0, 0.0, 1.0, -1.0, -0.75,

            //deseti:
            -0.01, 0.0, 0.0, -1.0, 0.0, 0.0, 1.0, -1.0,
            -0.01, 0.0, 0.3, -1.0, 0.0, 0.0, 1.0, 1.0,
            -0.01, 0.25, 0.0, -1.0, 0.0, 0.0, -1.0, -1.0,
            -0.01, 0.25, 0.3, -1.0, 0.0, 0.0, -1.0, 1.0,

            -0.01, 0.25, 0.0, 0.0, 1.0, 0.0, 1.0, -1.0,
            -0.01, 0.25, 0.3, 0.0, 1.0, 0.0, 1.0, 1.0,
            0.01, 0.25, 0.0, 0.0, 1.0, 0.0, -1.0, -1.0,
            0.01, 0.25, 0.3, 0.0, 1.0, 0.0, -1.0, 1.0,

            0.01, 0.25, 0.0, 1.0, 0.0, 0.0,  1.0, -1.0,
            0.01, 0.25, 0.3, 1.0, 0.0, 0.0,  1.0, 1.0,
            0.01, 0.0, 0.0, 1.0, 0.0, 0.0,  -1.0, -1.0,
            0.01, 0.0, 0.3, 1.0, 0.0, 0.0,  -1.0, 1.0,

            0.01, 0.0, 0.0, 0.0, -1.0, 0.0, 1.0, -1.0,
            0.01, 0.0, 0.3, 0.0, -1.0, 0.0, 1.0, 1.0,
            -0.01, 0.0, 0.0, 0.0, -1.0, 0.0, -1.0, -1.0,
            -0.01, 0.0, 0.3, 0.0, -1.0, 0.0, -1.0, 1.0,

            -0.01, 0.0, 0.3, 0.0, 0.0, 1.0, 1.0, -1.0,
            -0.01, 0.25, 0.3, 0.0, 0.0, 1.0, -1.0, -1.0,
            0.01, 0.0, 0.3, 0.0, 0.0, 1.0, 1.0, -0.75,
            0.01, 0.25, 0.3, 0.0, 0.0, 1.0, -1.0, -0.75,

            //jedanaesti:
            0.24, -0.75, 0.0, -1.0, 0.0, 0.0, 1.0, -1.0,
            0.24, -0.75, 0.3, -1.0, 0.0, 0.0, 1.0, 1.0,
            0.24, -0.5, 0.0, -1.0, 0.0, 0.0, -1.0, -1.0,
            0.24, -0.5, 0.3, -1.0, 0.0, 0.0, -1.0, 1.0,

            0.24, -0.5, 0.0, 0.0, 1.0, 0.0, 1.0, -1.0,
            0.24, -0.5, 0.3, 0.0, 1.0, 0.0, 1.0, 1.0,
            0.26, -0.5, 0.0, 0.0, 1.0, 0.0, -1.0, -1.0,
            0.26, -0.5, 0.3, 0.0, 1.0, 0.0, -1.0, 1.0,

            0.26, -0.5, 0.0, 1.0, 0.0, 0.0,  1.0, -1.0,
            0.26, -0.5, 0.3, 1.0, 0.0, 0.0,  1.0, 1.0,
            0.26, -0.75, 0.0, 1.0, 0.0, 0.0, -1.0, -1.0,
            0.26, -0.75, 0.3, 1.0, 0.0, 0.0,  -1.0, 1.0,

            0.26, -0.75, 0.0, 0.0, -1.0, 0.0, 1.0, -1.0,
            0.26, -0.75, 0.3, 0.0, -1.0, 0.0, 1.0, 1.0,
            0.24, -0.75, 0.0, 0.0, -1.0, 0.0, -1.0, -1.0,
            0.24, -0.75, 0.3, 0.0, -1.0, 0.0, -1.0, 1.0,

            0.24, -0.75, 0.3, 0.0, 0.0, 1.0, 1.0, -1.0,
            0.24, -0.5, 0.3, 0.0, 0.0, 1.0, -1.0, -1.0,
            0.26, -0.75, 0.3, 0.0, 0.0, 1.0, 1.0, -0.75,
            0.26, -0.5, 0.3, 0.0, 0.0, 1.0, -1.0, -0.75,

            //dvanaesti:
            0.24, -0.25, 0.0, -1.0, 0.0, 0.0, 4.0, -1.0,
            0.24, -0.25, 0.3, -1.0, 0.0, 0.0, 4.0, 1.0,
            0.24, 0.75, 0.0, -1.0, 0.0, 0.0, -1.0, -1.0,
            0.24, 0.75, 0.3, -1.0, 0.0, 0.0, -1.0, 1.0,

            0.24, 0.75, 0.0, 0.0, 1.0, 0.0, 1.0, -1.0,
            0.24, 0.75, 0.3, 0.0, 1.0, 0.0, 1.0, 1.0,
            0.26, 0.75, 0.0, 0.0, 1.0, 0.0, -1.0, -1.0,
            0.26, 0.75, 0.3, 0.0, 1.0, 0.0, -1.0, 1.0,

            0.26, 0.75, 0.0, 1.0, 0.0, 0.0,  4.0, -1.0,
            0.26, 0.75, 0.3, 1.0, 0.0, 0.0,  4.0, 1.0,
            0.26, -0.25, 0.0, 1.0, 0.0, 0.0,  -1.0, -1.0,
            0.26, -0.25, 0.3, 1.0, 0.0, 0.0,  -1.0, 1.0,

            0.26, -0.25, 0.0, 0.0, -1.0, 0.0, 1.0, -1.0,
            0.26, -0.25, 0.3, 0.0, -1.0, 0.0, 1.0, 1.0,
            0.24, -0.25, 0.0, 0.0, -1.0, 0.0, -1.0, -1.0,
            0.24, -0.25, 0.3, 0.0, -1.0, 0.0, -1.0, 1.0,

            0.24, -0.25, 0.3, 0.0, 0.0, 1.0, 4.0, -1.0,
            0.24, 0.75, 0.3, 0.0, 0.0, 1.0, -1.0, -1.0,
            0.26, -0.25, 0.3, 0.0, 0.0, 1.0, 4.0, -0.75,
            0.26, 0.75, 0.3, 0.0, 0.0, 1.0, -1.0, -0.75,

            //trinaesti:
            0.49, -1.0, 0.0, -1.0, 0.0, 0.0, 1.0, -1.0,
            0.49, -1.0, 0.3, -1.0, 0.0, 0.0, 1.0, 1.0,
            0.49, -0.75, 0.0, -1.0, 0.0, 0.0, -1.0, -1.0,
            0.49, -0.75, 0.3, -1.0, 0.0, 0.0, -1.0, 1.0,

            0.49, -0.75, 0.0, 0.0, 1.0, 0.0, 1.0, -1.0,
            0.49, -0.75, 0.3, 0.0, 1.0, 0.0, 1.0, 1.0,
            0.51, -0.75, 0.0, 0.0, 1.0, 0.0, -1.0, -1.0,
            0.51, -0.75, 0.3, 0.0, 1.0, 0.0, -1.0, 1.0,

            0.51, -0.75, 0.0, 1.0, 0.0, 0.0,  1.0, -1.0,
            0.51, -0.75, 0.3, 1.0, 0.0, 0.0,  1.0, 1.0,
            0.51, -1.0, 0.0, 1.0, 0.0, 0.0,  -1.0, -1.0,
            0.51, -1.0, 0.3, 1.0, 0.0, 0.0,  -1.0, 1.0,

            0.51, -1.0, 0.0, 0.0, -1.0, 0.0, 1.0, -1.0,
            0.51, -1.0, 0.3, 0.0, -1.0, 0.0, 1.0, 1.0,
            0.49, -1.0, 0.0, 0.0, -1.0, 0.0, -1.0, -1.0,
            0.49, -1.0, 0.3, 0.0, -1.0, 0.0, -1.0, 1.0,

            0.49, -1.0, 0.3, 0.0, 0.0, 1.0, 1.0, -1.0,
            0.49, -0.75, 0.3, 0.0, 0.0, 1.0, -1.0, -1.0,
            0.51, -1.0, 0.3, 0.0, 0.0, 1.0, 1.0, -0.75,
            0.51, -0.75, 0.3, 0.0, 0.0, 1.0, -1.0, -0.75,

            //cetrnaesti:
            0.74, -0.75, 0.0, -1.0, 0.0, 0.0, 2.0, -1.0,
            0.74, -0.75, 0.3, -1.0, 0.0, 0.0, 2.0, 1.0,
            0.74, -0.25, 0.0, -1.0, 0.0, 0.0, -1.0, -1.0,
            0.74, -0.25, 0.3, -1.0, 0.0, 0.0, -1.0, 1.0,

            0.74, -0.25, 0.0, 0.0, 1.0, 0.0, 1.0, -1.0,
            0.74, -0.25, 0.3, 0.0, 1.0, 0.0, 1.0, 1.0,
            0.76, -0.25, 0.0, 0.0, 1.0, 0.0, -1.0, -1.0,
            0.76, -0.25, 0.3, 0.0, 1.0, 0.0, -1.0, 1.0,

            0.76, -0.25, 0.0, 1.0, 0.0, 0.0, 2.0, -1.0,
            0.76, -0.25, 0.3, 1.0, 0.0, 0.0,  2.0, 1.0,
            0.76, -0.75, 0.0, 1.0, 0.0, 0.0, -1.0, -1.0,
            0.76, -0.75, 0.3, 1.0, 0.0, 0.0,  -1.0, 1.0,

            0.76, -0.75, 0.0, 0.0, -1.0, 0.0, 1.0, -1.0,
            0.76, -0.75, 0.3, 0.0, -1.0, 0.0, 1.0, 1.0,
            0.74, -0.75, 0.0, 0.0, -1.0, 0.0, -1.0, -1.0,
            0.74, -0.75, 0.3, 0.0, -1.0, 0.0, -1.0, 1.0,

            0.74, -0.75, 0.3, 0.0, 0.0, 1.0, 2.0, -1.0,
            0.74, -0.25, 0.3, 0.0, 0.0, 1.0, -1.0, -1.0,
            0.76, -0.75, 0.3, 0.0, 0.0, 1.0, 2.0, -0.75,
            0.76, -0.25, 0.3, 0.0, 0.0, 1.0, -1.0, -0.75,

            //unutrasnji horizontalni zidovi(ima ih 15):
            //prvi:
            -1.0, 0.76, 0.0, 0.0, 1.0, 0.0, 1.0, -1.0,
            -1.0, 0.76, 0.3, 0.0, 1.0, 0.0, 1.0, 1.0,
            -0.74, 0.76, 0.0, 0.0, 1.0, 0.0, -1.0, -1.0,
            -0.74, 0.76, 0.3, 0.0, 1.0, 0.0, -1.0, 1.0,

            -0.74, 0.76, 0.0, 1.0, 0.0, 0.0,  1.0, -1.0,
            -0.74, 0.76, 0.3, 1.0, 0.0, 0.0,  1.0, 1.0,
            -0.74, 0.74, 0.0, 1.0, 0.0, 0.0,  -1.0, -1.0,
            -0.74, 0.74, 0.3, 1.0, 0.0, 0.0,  -1.0, 1.0,

            -0.74, 0.74, 0.0, 0.0, -1.0, 0.0, 1.0, -1.0,
            -0.74, 0.74, 0.3, 0.0, -1.0, 0.0, 1.0, 1.0,
            -1.0, 0.74, 0.0, 0.0, -1.0, 0.0, -1.0, -1.0,
            -1.0, 0.74, 0.3, 0.0, -1.0, 0.0, -1.0, 1.0,

            -1.0, 0.74, 0.0, -1.0, 0.0, 0.0,1.0, -1.0,
            -1.0, 0.74, 0.3, -1.0, 0.0, 0.0,1.0, 1.0,
            -1.0, 0.76, 0.0, -1.0, 0.0, 0.0,-1.0, -1.0,
            -1.0, 0.76, 0.3, -1.0, 0.0, 0.0,-1.0, 1.0,

            -1.0, 0.76, 0.3, 0.0, 0.0, 1.0, 1.0, -1.0,
            -0.74, 0.76, 0.3, 0.0, 0.0, 1.0, -1.0, -1.0,
            -1.0, 0.74, 0.3, 0.0, 0.0, 1.0, 1.0, -0.75,
            -0.74, 0.74, 0.3, 0.0, 0.0, 1.0, -1.0, -0.75,

            //drugi:
            -0.26, 0.76, 0.0, 0.0, 1.0, 0.0, 4.0, -1.0,
            -0.26, 0.76, 0.3, 0.0, 1.0, 0.0, 4.0, 1.0,
            0.75, 0.76, 0.0, 0.0, 1.0, 0.0, -1.0, -1.0,
            0.75, 0.76, 0.3, 0.0, 1.0, 0.0, -1.0, 1.0,

            0.75, 0.76, 0.0, 1.0, 0.0, 0.0,  1.0, -1.0,
            0.75, 0.76, 0.3, 1.0, 0.0, 0.0,  1.0, 1.0,
            0.75, 0.74, 0.0, 1.0, 0.0, 0.0,  -1.0, -1.0,
            0.75, 0.74, 0.3, 1.0, 0.0, 0.0, -1.0, 1.0,

            0.75, 0.74, 0.0, 0.0, -1.0, 0.0, 4.0, -1.0,
            0.75, 0.74, 0.3, 0.0, -1.0, 0.0, 4.0, 1.0,
            -0.26, 0.74, 0.0, 0.0, -1.0, 0.0, -1.0, -1.0,
            -0.26, 0.74, 0.3, 0.0, -1.0, 0.0, -1.0, 1.0,

            -0.26, 0.74, 0.0, -1.0, 0.0, 0.0,1.0, -1.0,
            -0.26, 0.74, 0.3, -1.0, 0.0, 0.0,1.0, 1.0,
            -0.26, 0.76, 0.0, -1.0, 0.0, 0.0,-1.0, -1.0,
            -0.26, 0.76, 0.3, -1.0, 0.0, 0.0,-1.0, 1.0,

            -0.26, 0.76, 0.3, 0.0, 0.0, 1.0, 4.0, -1.0,
            0.75, 0.76, 0.3, 0.0, 0.0, 1.0, -1.0, -1.0,
            -0.26, 0.74, 0.3, 0.0, 0.0, 1.0, 4.0, -0.75,
            0.75, 0.74, 0.3, 0.0, 0.0, 1.0, -1.0, -0.75,

            //treci:
            -0.76, 0.51, 0.0, 0.0, 1.0, 0.0, 3.0, -1.0,
            -0.76, 0.51, 0.3, 0.0, 1.0, 0.0, 3.0, 1.0,
            0.0, 0.51, 0.0, 0.0, 1.0, 0.0, -1.0, -1.0,
            0.0, 0.51, 0.3, 0.0, 1.0, 0.0, -1.0, 1.0,

            0.0, 0.51, 0.0, 1.0, 0.0, 0.0,  1.0, -1.0,
            0.0, 0.51, 0.3, 1.0, 0.0, 0.0,  1.0, 1.0,
            0.0, 0.49, 0.0, 1.0, 0.0, 0.0,  -1.0, -1.0,
            0.0, 0.49, 0.3, 1.0, 0.0, 0.0,  -1.0, 1.0,

            0.0, 0.49, 0.0, 0.0, -1.0, 0.0, 3.0, -1.0,
            0.0, 0.49, 0.3, 0.0, -1.0, 0.0, 3.0, 1.0,
            -0.76, 0.49, 0.0, 0.0, -1.0, 0.0, -1.0, -1.0,
            -0.76, 0.49, 0.3, 0.0, -1.0, 0.0, -1.0, 1.0,

            -0.76, 0.49, 0.0, -1.0, 0.0, 0.0,1.0, -1.0,
            -0.76, 0.49, 0.3, -1.0, 0.0, 0.0,1.0, 1.0,
            -0.76, 0.51, 0.0, -1.0, 0.0, 0.0,-1.0, -1.0,
            -0.76, 0.51, 0.3, -1.0, 0.0, 0.0,-1.0, 1.0,

            -0.76, 0.51, 0.3, 0.0, 0.0, 1.0, 3.0, -1.0,
            0.0, 0.51, 0.3, 0.0, 0.0, 1.0, -1.0, -1.0,
            -0.76, 0.49, 0.3, 0.0, 0.0, 1.0, 3.0, -0.75,
            0.0, 0.49, 0.3, 0.0, 0.0, 1.0, -1.0, -0.75,

            //cetvrti:
            0.5, 0.51, 0.0, 0.0, 1.0, 0.0, 2.0, -1.0,
            0.5, 0.51, 0.3, 0.0, 1.0, 0.0, 2.0, 1.0,
            1.0, 0.51, 0.0, 0.0, 1.0, 0.0, -1.0, -1.0,
            1.0, 0.51, 0.3, 0.0, 1.0, 0.0, -1.0, 1.0,

            1.0, 0.51, 0.0, 1.0, 0.0, 0.0,  1.0, -1.0,
            1.0, 0.51, 0.3, 1.0, 0.0, 0.0,  1.0, 1.0,
            1.0, 0.49, 0.0, 1.0, 0.0, 0.0,  -1.0, -1.0,
            1.0, 0.49, 0.3, 1.0, 0.0, 0.0,  -1.0, 1.0,

            1.0, 0.49, 0.0, 0.0, -1.0, 0.0, 2.0, -1.0,
            1.0, 0.49, 0.3, 0.0, -1.0, 0.0, 2.0, 1.0,
            0.5, 0.49, 0.0, 0.0, -1.0, 0.0, -1.0, -1.0,
            0.5, 0.49, 0.3, 0.0, -1.0, 0.0, -1.0, 1.0,

            0.5, 0.49, 0.0, -1.0, 0.0, 0.0,1.0, -1.0,
            0.5, 0.49, 0.3, -1.0, 0.0, 0.0,1.0, 1.0,
            0.5, 0.51, 0.0, -1.0, 0.0, 0.0,-1.0, -1.0,
            0.5, 0.51, 0.3, -1.0, 0.0, 0.0,-1.0, 1.0,

            0.5, 0.51, 0.3, 0.0, 0.0, 1.0, 2.0, -1.0,
            1.0, 0.51, 0.3, 0.0, 0.0, 1.0, -1.0, -1.0,
            0.5, 0.49, 0.3, 0.0, 0.0, 1.0, 2.0, -0.75,
            1.0, 0.49, 0.3, 0.0, 0.0, 1.0, -1.0, -0.75,

            //peti:
            -0.76, 0.26, 0.0, 0.0, 1.0, 0.0, 3.0, -1.0,
            -0.76, 0.26, 0.3, 0.0, 1.0, 0.0, 3.0, 1.0,
            0.01, 0.26, 0.0, 0.0, 1.0, 0.0, -1.0, -1.0,
            0.01, 0.26, 0.3, 0.0, 1.0, 0.0, -1.0, 1.0,

            0.01, 0.26, 0.0, 1.0, 0.0, 0.0,  1.0, -1.0,
            0.01, 0.26, 0.3, 1.0, 0.0, 0.0,  1.0, 1.0,
            0.01, 0.24, 0.0, 1.0, 0.0, 0.0,  -1.0, -1.0,
            0.01, 0.24, 0.3, 1.0, 0.0, 0.0,  -1.0, 1.0,

            0.01, 0.24, 0.0, 0.0, -1.0, 0.0, 3.0, -1.0,
            0.01, 0.24, 0.3, 0.0, -1.0, 0.0, 3.0, 1.0,
            -0.76, 0.24, 0.0, 0.0, -1.0, 0.0, -1.0, -1.0,
            -0.76, 0.24, 0.3, 0.0, -1.0, 0.0, -1.0, 1.0,

            -0.76, 0.24, 0.0, -1.0, 0.0, 0.0,1.0, -1.0,
            -0.76, 0.24, 0.3, -1.0, 0.0, 0.0,1.0, 1.0,
            -0.76, 0.26, 0.0, -1.0, 0.0, 0.0,-1.0, -1.0,
            -0.76, 0.26, 0.3, -1.0, 0.0, 0.0,-1.0, 1.0,

            -0.76, 0.26, 0.3, 0.0, 0.0, 1.0, 3.0, -1.0,
            0.01, 0.26, 0.3, 0.0, 0.0, 1.0, -1.0, -1.0,
            -0.76, 0.24, 0.3, 0.0, 0.0, 1.0, 3.0, -0.75,
            0.01, 0.24, 0.3, 0.0, 0.0, 1.0, -1.0, -0.75,

            //sesti:
            0.5, 0.26, 0.0, 0.0, 1.0, 0.0, 2.0, -1.0,
            0.5, 0.26, 0.3, 0.0, 1.0, 0.0, 2.0, 1.0,
            1.0, 0.26, 0.0, 0.0, 1.0, 0.0, -1.0, -1.0,
            1.0, 0.26, 0.3, 0.0, 1.0, 0.0, -1.0, 1.0,

            1.0, 0.26, 0.0, 1.0, 0.0, 0.0,  1.0, -1.0,
            1.0, 0.26, 0.3, 1.0, 0.0, 0.0,  1.0, 1.0,
            1.0, 0.24, 0.0, 1.0, 0.0, 0.0,  -1.0, -1.0,
            1.0, 0.24, 0.3, 1.0, 0.0, 0.0,  -1.0, 1.0,

            1.0, 0.24, 0.0, 0.0, -1.0, 0.0, 2.0, -1.0,
            1.0, 0.24, 0.3, 0.0, -1.0, 0.0, 2.0, 1.0,
            0.5, 0.24, 0.0, 0.0, -1.0, 0.0, -1.0, -1.0,
            0.5, 0.24, 0.3, 0.0, -1.0, 0.0, -1.0, 1.0,

            0.5, 0.24, 0.0, -1.0, 0.0, 0.0,1.0, -1.0,
            0.5, 0.24, 0.3, -1.0, 0.0, 0.0,1.0, 1.0,
            0.5, 0.26, 0.0, -1.0, 0.0, 0.0,-1.0, -1.0,
            0.5, 0.26, 0.3, -1.0, 0.0, 0.0,-1.0, 1.0,

            0.5, 0.26, 0.3, 0.0, 0.0, 1.0, 2.0, -1.0,
            1.0, 0.26, 0.3, 0.0, 0.0, 1.0, -1.0, -1.0,
            0.5, 0.24, 0.3, 0.0, 0.0, 1.0, 2.0, -0.75,
            1.0, 0.24, 0.3, 0.0, 0.0, 1.0, -1.0, -0.75,

            //sedmi:
            -0.76, 0.01, 0.0, 0.0, 1.0, 0.0, 1.0, -1.0,
            -0.76, 0.01, 0.3, 0.0, 1.0, 0.0, 1.0, 1.0,
            -0.49, 0.01, 0.0, 0.0, 1.0, 0.0, -1.0, -1.0,
            -0.49, 0.01, 0.3, 0.0, 1.0, 0.0, -1.0, 1.0,

            -0.49, 0.01, 0.0, 1.0, 0.0, 0.0,  1.0, -1.0,
            -0.49, 0.01, 0.3, 1.0, 0.0, 0.0,  1.0, 1.0,
            -0.49, -0.01, 0.0, 1.0, 0.0, 0.0,  -1.0, -1.0,
            -0.49, -0.01, 0.3, 1.0, 0.0, 0.0,  -1.0, 1.0,

            -0.49, -0.01, 0.0, 0.0, -1.0, 0.0, 1.0, -1.0,
            -0.49, -0.01, 0.3, 0.0, -1.0, 0.0, 1.0, 1.0,
            -0.76, -0.01, 0.0, 0.0, -1.0, 0.0, -1.0, -1.0,
            -0.76, -0.01, 0.3, 0.0, -1.0, 0.0, -1.0, 1.0,

            -0.76, -0.01, 0.0, -1.0, 0.0, 0.0,1.0, -1.0,
            -0.76, -0.01, 0.3, -1.0, 0.0, 0.0,1.0, 1.0,
            -0.76, 0.01, 0.0, -1.0, 0.0, 0.0,-1.0, -1.0,
            -0.76, 0.01, 0.3, -1.0, 0.0, 0.0,-1.0, 1.0,

            -0.76, 0.01, 0.3, 0.0, 0.0, 1.0, 1.0, -1.0,
            -0.49, 0.01, 0.3, 0.0, 0.0, 1.0, -1.0, -1.0,
            -0.76, -0.01, 0.3, 0.0, 0.0, 1.0, 1.0, -0.75,
            -0.49, -0.01, 0.3, 0.0, 0.0, 1.0, -1.0, -0.75,

            //osmi:
            -0.26, 0.01, 0.0, 0.0, 1.0, 0.0, 1.0, -1.0,
            -0.26, 0.01, 0.3, 0.0, 1.0, 0.0, 1.0, 1.0,
            0.01, 0.01, 0.0, 0.0, 1.0, 0.0, -1.0, -1.0,
            0.01, 0.01, 0.3, 0.0, 1.0, 0.0, -1.0, 1.0,

            0.01, 0.01, 0.0, 1.0, 0.0, 0.0,  1.0, -1.0,
            0.01, 0.01, 0.3, 1.0, 0.0, 0.0,  1.0, 1.0,
            0.01, -0.01, 0.0, 1.0, 0.0, 0.0,  -1.0, -1.0,
            0.01, -0.01, 0.3, 1.0, 0.0, 0.0,  -1.0, 1.0,

            0.01, -0.01, 0.0, 0.0, -1.0, 0.0, 1.0, -1.0,
            0.01, -0.01, 0.3, 0.0, -1.0, 0.0, 1.0, 1.0,
            -0.26, -0.01, 0.0, 0.0, -1.0, 0.0, -1.0, -1.0,
            -0.26, -0.01, 0.3, 0.0, -1.0, 0.0, -1.0, 1.0,

            -0.26, -0.01, 0.0, -1.0, 0.0, 0.0,1.0, -1.0,
            -0.26, -0.01, 0.3, -1.0, 0.0, 0.0,1.0, 1.0,
            -0.26, 0.01, 0.0, -1.0, 0.0, 0.0,-1.0, -1.0,
            -0.26, 0.01, 0.3, -1.0, 0.0, 0.0,-1.0, 1.0,

            -0.26, 0.01, 0.3, 0.0, 0.0, 1.0, 1.0, -1.0,
            0.01, 0.01, 0.3, 0.0, 0.0, 1.0, -1.0, -1.0,
            -0.26, -0.01, 0.3, 0.0, 0.0, 1.0, 1.0, -0.75,
            0.01, -0.01, 0.3, 0.0, 0.0, 1.0, -1.0, -0.75,

            //deveti:
            0.5, 0.01, 0.0, 0.0, 1.0, 0.0, 2.0, -1.0,
            0.5, 0.01, 0.3, 0.0, 1.0, 0.0, 2.0, 1.0,
            1.0, 0.01, 0.0, 0.0, 1.0, 0.0, -1.0, -1.0,
            1.0, 0.01, 0.3, 0.0, 1.0, 0.0, -1.0, 1.0,

            1.0, 0.01, 0.0, 1.0, 0.0, 0.0,  1.0, -1.0,
            1.0, 0.01, 0.3, 1.0, 0.0, 0.0,  1.0, 1.0,
            1.0, -0.01, 0.0, 1.0, 0.0, 0.0,  -1.0, -1.0,
            1.0, -0.01, 0.3, 1.0, 0.0, 0.0,  -1.0, 1.0,

            1.0, -0.01, 0.0, 0.0, -1.0, 0.0, 2.0, -1.0,
            1.0, -0.01, 0.3, 0.0, -1.0, 0.0, 2.0, 1.0,
            0.5, -0.01, 0.0, 0.0, -1.0, 0.0, -1.0, -1.0,
            0.5, -0.01, 0.3, 0.0, -1.0, 0.0, -1.0, 1.0,

            0.5, -0.01, 0.0, -1.0, 0.0, 0.0,1.0, -1.0,
            0.5, -0.01, 0.3, -1.0, 0.0, 0.0,1.0, 1.0,
            0.5, 0.01, 0.0, -1.0, 0.0, 0.0,-1.0, -1.0,
            0.5, 0.01, 0.3, -1.0, 0.0, 0.0,-1.0, 1.0,

            0.5, 0.01, 0.3, 0.0, 0.0, 1.0, 2.0, -1.0,
            1.0, 0.01, 0.3, 0.0, 0.0, 1.0, -1.0, -1.0,
            0.5, -0.01, 0.3, 0.0, 0.0, 1.0, 2.0, -0.75,
            1.0, -0.01, 0.3, 0.0, 0.0, 1.0, -1.0, -0.75,

            //deseti:
            -1.0, -0.24, 0.0, 0.0, 1.0, 0.0, 1.0, -1.0,
            -1.0, -0.24, 0.3, 0.0, 1.0, 0.0, 1.0, 1.0,
            -0.74, -0.24, 0.0, 0.0, 1.0, 0.0, -1.0, -1.0,
            -0.74, -0.24, 0.3, 0.0, 1.0, 0.0, -1.0, 1.0,

            -0.74, -0.24, 0.0, 1.0, 0.0, 0.0,  1.0, -1.0,
            -0.74, -0.24, 0.3, 1.0, 0.0, 0.0,  1.0, 1.0,
            -0.74, -0.26, 0.0, 1.0, 0.0, 0.0,  -1.0, -1.0,
            -0.74, -0.26, 0.3, 1.0, 0.0, 0.0,  -1.0, 1.0,

            -0.74, -0.26, 0.0, 0.0, -1.0, 0.0, 1.0, -1.0,
            -0.74, -0.26, 0.3, 0.0, -1.0, 0.0, 1.0, 1.0,
            -1.0, -0.26, 0.0, 0.0, -1.0, 0.0, -1.0, -1.0,
            -1.0, -0.26, 0.3, 0.0, -1.0, 0.0, -1.0, 1.0,

            -1.0, -0.26, 0.0, -1.0, 0.0, 0.0,1.0, -1.0,
            -1.0, -0.26, 0.3, -1.0, 0.0, 0.0,1.0, 1.0,
            -1.0, -0.24, 0.0, -1.0, 0.0, 0.0,-1.0, -1.0,
            -1.0, -0.24, 0.3, -1.0, 0.0, 0.0,-1.0, 1.0,

            -1.0, -0.24, 0.3, 0.0, 0.0, 1.0, 1.0, -1.0,
            -0.74, -0.24, 0.3, 0.0, 0.0, 1.0, -1.0, -1.0,
            -1.0, -0.26, 0.3, 0.0, 0.0, 1.0, 1.0, -0.75,
            -0.74, -0.26, 0.3, 0.0, 0.0, 1.0, -1.0, -0.75,

            //jedanaesti:
            0.0, -0.24, 0.0, 0.0, 1.0, 0.0, 1.0, -1.0,
            0.0, -0.24, 0.3, 0.0, 1.0, 0.0, 1.0, 1.0,
            0.26, -0.24, 0.0, 0.0, 1.0, 0.0, -1.0, -1.0,
            0.26, -0.24, 0.3, 0.0, 1.0, 0.0, -1.0, 1.0,

            0.26, -0.24, 0.0, 1.0, 0.0, 0.0,  1.0, -1.0,
            0.26, -0.24, 0.3, 1.0, 0.0, 0.0,  1.0, 1.0,
            0.26, -0.26, 0.0, 1.0, 0.0, 0.0,  -1.0, -1.0,
            0.26, -0.26, 0.3, 1.0, 0.0, 0.0,  -1.0, 1.0,

            0.26, -0.26, 0.0, 0.0, -1.0, 0.0, 1.0, -1.0,
            0.26, -0.26, 0.3, 0.0, -1.0, 0.0, 1.0, 1.0,
            0.0, -0.26, 0.0, 0.0, -1.0, 0.0, -1.0, -1.0,
            0.0, -0.26, 0.3, 0.0, -1.0, 0.0, -1.0, 1.0,

            0.0, -0.26, 0.0, -1.0, 0.0, 0.0,1.0, -1.0,
            0.0, -0.26, 0.3, -1.0, 0.0, 0.0,1.0, 1.0,
            0.0, -0.24, 0.0, -1.0, 0.0, 0.0,-1.0, -1.0,
            0.0, -0.24, 0.3, -1.0, 0.0, 0.0,-1.0, 1.0,

            0.0, -0.24, 0.3, 0.0, 0.0, 1.0, 1.0, -1.0,
            0.26, -0.24, 0.3, 0.0, 0.0, 1.0, -1.0, -1.0,
            0.0, -0.26, 0.3, 0.0, 0.0, 1.0, 1.0, -0.75,
            0.26, -0.26, 0.3, 0.0, 0.0, 1.0, -1.0, -0.75,

            //dvanaesti:
            0.5, -0.24, 0.0, 0.0, 1.0, 0.0, 1.0, -1.0,
            0.5, -0.24, 0.3, 0.0, 1.0, 0.0, 1.0, 1.0,
            0.76, -0.24, 0.0, 0.0, 1.0, 0.0, -1.0, -1.0,
            0.76, -0.24, 0.3, 0.0, 1.0, 0.0, -1.0, 1.0,

            0.76, -0.24, 0.0, 1.0, 0.0, 0.0, 1.0, -1.0,
            0.76, -0.24, 0.3, 1.0, 0.0, 0.0, 1.0, 1.0,
            0.76, -0.26, 0.0, 1.0, 0.0, 0.0, -1.0, -1.0,
            0.76, -0.26, 0.3, 1.0, 0.0, 0.0, -1.0, 1.0,

            0.76, -0.26, 0.0, 0.0, -1.0, 0.0, 1.0, -1.0,
            0.76, -0.26, 0.3, 0.0, -1.0, 0.0, 1.0, 1.0,
            0.5, -0.26, 0.0, 0.0, -1.0, 0.0, -1.0, -1.0,
            0.5, -0.26, 0.3, 0.0, -1.0, 0.0, -1.0, 1.0,

            0.5, -0.26, 0.0, -1.0, 0.0, 0.0,1.0, -1.0,
            0.5, -0.26, 0.3, -1.0, 0.0, 0.0,1.0, 1.0,
            0.5, -0.24, 0.0, -1.0, 0.0, 0.0,-1.0, -1.0,
            0.5, -0.24, 0.3, -1.0, 0.0, 0.0,-1.0, 1.0,

            0.5, -0.24, 0.3, 0.0, 0.0, 1.0, 1.0, -1.0,
            0.76, -0.24, 0.3, 0.0, 0.0, 1.0, -1.0, -1.0,
            0.5, -0.26, 0.3, 0.0, 0.0, 1.0, 1.0, -0.75,
            0.76, -0.26, 0.3, 0.0, 0.0, 1.0, -1.0, -0.75,

            //trinaesti:
            -0.26, -0.49, 0.0, 0.0, 1.0, 0.0, 2.0, -1.0,
            -0.26, -0.49, 0.3, 0.0, 1.0, 0.0, 2.0, 1.0,
            0.26, -0.49, 0.0, 0.0, 1.0, 0.0, -1.0, -1.0,
            0.26, -0.49, 0.3, 0.0, 1.0, 0.0, -1.0, 1.0,

            0.26, -0.49, 0.0, 1.0, 0.0, 0.0, 1.0, -1.0,
            0.26, -0.49, 0.3, 1.0, 0.0, 0.0, 1.0, 1.0,
            0.26, -0.51, 0.0, 1.0, 0.0, 0.0, -1.0, -1.0,
            0.26, -0.51, 0.3, 1.0, 0.0, 0.0, -1.0, 1.0,

            0.26, -0.51, 0.0, 0.0, -1.0, 0.0, 2.0, -1.0,
            0.26, -0.51, 0.3, 0.0, -1.0, 0.0, 2.0, 1.0,
            -0.26, -0.51, 0.0, 0.0, -1.0, 0.0, -1.0, -1.0,
            -0.26, -0.51, 0.3, 0.0, -1.0, 0.0, -1.0, 1.0,

            -0.26, -0.51, 0.0, -1.0, 0.0, 0.0,1.0, -1.0,
            -0.26, -0.51, 0.3, -1.0, 0.0, 0.0,1.0, 1.0,
            -0.26, -0.49, 0.0, -1.0, 0.0, 0.0,-1.0, -1.0,
            -0.26, -0.49, 0.3, -1.0, 0.0, 0.0,-1.0, 1.0,

            -0.26, -0.49, 0.3, 0.0, 0.0, 1.0, 2.0, -1.0,
            0.26, -0.49, 0.3, 0.0, 0.0, 1.0, -1.0, -1.0,
            -0.26, -0.51, 0.3, 0.0, 0.0, 1.0, 2.0, -0.75,
            0.26, -0.51, 0.3, 0.0, 0.0, 1.0, -1.0, -0.75,

            //cetrnaesti:
            0.5, -0.49, 0.0, 0.0, 1.0, 0.0, 1.0, -1.0,
            0.5, -0.49, 0.3, 0.0, 1.0, 0.0, 1.0, 1.0,
            0.76, -0.49, 0.0, 0.0, 1.0, 0.0, -1.0, -1.0,
            0.76, -0.49, 0.3, 0.0, 1.0, 0.0, -1.0, 1.0,

            0.76, -0.49, 0.0, 1.0, 0.0, 0.0, 1.0, -1.0,
            0.76, -0.49, 0.3, 1.0, 0.0, 0.0, 1.0, 1.0,
            0.76, -0.51, 0.0, 1.0, 0.0, 0.0, -1.0, -1.0,
            0.76, -0.51, 0.3, 1.0, 0.0, 0.0, -1.0, 1.0,

            0.76, -0.51, 0.0, 0.0, -1.0, 0.0, 1.0, -1.0,
            0.76, -0.51, 0.3, 0.0, -1.0, 0.0, 1.0, 1.0,
            0.5, -0.51, 0.0, 0.0, -1.0, 0.0, -1.0, -1.0,
            0.5, -0.51, 0.3, 0.0, -1.0, 0.0, -1.0, 1.0,

            0.5, -0.51, 0.0, -1.0, 0.0, 0.0,1.0, -1.0,
            0.5, -0.51, 0.3, -1.0, 0.0, 0.0,1.0, 1.0,
            0.5, -0.49, 0.0, -1.0, 0.0, 0.0,-1.0, -1.0,
            0.5, -0.49, 0.3, -1.0, 0.0, 0.0,-1.0, 1.0,

            0.5, -0.49, 0.3, 0.0, 0.0, 1.0, 1.0, -1.0,
            0.76, -0.49, 0.3, 0.0, 0.0, 1.0, -1.0, -1.0,
            0.5, -0.51, 0.3, 0.0, 0.0, 1.0, 1.0, -0.75,
            0.76, -0.51, 0.3, 0.0, 0.0, 1.0, -1.0, -0.75,

            //petnaesti:
            0.24, -0.74, 0.0, 0.0, 1.0, 0.0, 1.0, -1.0,
            0.24, -0.74, 0.3, 0.0, 1.0, 0.0, 1.0, 1.0,
            0.76, -0.74, 0.0, 0.0, 1.0, 0.0, -1.0, -1.0,
            0.76, -0.74, 0.3, 0.0, 1.0, 0.0, -1.0, 1.0,

            0.76, -0.74, 0.0, 1.0, 0.0, 0.0, 1.0, -1.0,
            0.76, -0.74, 0.3, 1.0, 0.0, 0.0,  1.0, 1.0,
            0.76, -0.76, 0.0, 1.0, 0.0, 0.0, -1.0, -1.0,
            0.76, -0.76, 0.3, 1.0, 0.0, 0.0, -1.0, 1.0,

            0.76, -0.76, 0.0, 0.0, -1.0, 0.0, 1.0, -1.0,
            0.76, -0.76, 0.3, 0.0, -1.0, 0.0, 1.0, 1.0,
            0.24, -0.76, 0.0, 0.0, -1.0, 0.0, -1.0, -1.0,
            0.24, -0.76, 0.3, 0.0, -1.0, 0.0, -1.0, 1.0,

            0.24, -0.76, 0.0, -1.0, 0.0, 0.0,1.0, -1.0,
            0.24, -0.76, 0.3, -1.0, 0.0, 0.0,1.0, 1.0,
            0.24, -0.74, 0.0, -1.0, 0.0, 0.0,-1.0, -1.0,
            0.24, -0.74, 0.3, -1.0, 0.0, 0.0,-1.0, 1.0,

            0.24, -0.74, 0.3, 0.0, 0.0, 1.0, 1.0, -1.0,
            0.76, -0.74, 0.3, 0.0, 0.0, 1.0, -1.0, -1.0,
            0.24, -0.76, 0.3, 0.0, 0.0, 1.0, 1.0, -0.75,
            0.76, -0.76, 0.3, 0.0, 0.0, 1.0, -1.0, -0.75,
    };

    unsigned indicesMaze[]= {
            //levi:
            0, 1, 2,
            1, 3, 2,

            4, 5, 6,
            5, 7, 6,

            8, 9, 10,
            9, 11, 10,

            12, 13 ,14,
            13, 15 ,14,

            16, 18, 17,
            17, 18, 19,

            //gornji:
            20, 21, 22,
            21, 23, 22,

            24, 25, 26,
            25, 27, 26,

            28, 29, 30,
            29, 31, 30,

            32, 33 ,34,
            33, 35 ,34,

            36, 38, 37,
            37, 38, 39,

            //desni:
            40, 42, 41,
            41, 42, 43,

            44, 46, 45,
            45, 46, 47,

            48, 50, 49,
            49, 50, 51,

            52, 54 ,53,
            53, 54 ,55,

            56, 57, 58,
            57, 59, 58,

            //donji:
            60, 62, 61,
            61, 62, 63,

            64, 66, 65,
            65, 66, 67,

            68, 70, 69,
            69, 70, 71,

            72, 74 ,73,
            73, 74 ,75,

            76, 77, 78,
            77, 79, 78,

            //unutrasnji vertikalni zidovi(od 14):
            //prvi:
            80, 81, 82,
            81, 83, 82,

            84, 85, 86,
            85, 87, 86,

            88, 89, 90,
            89, 91, 90,

            92, 93 ,94,
            93, 95 ,94,

            96, 98, 97,
            97, 98, 99,

            //drugi:
            100, 101, 102,
            101, 103, 102,

            104, 105, 106,
            105, 107, 106,

            108, 109, 110,
            109, 111, 110,

            112, 113 ,114,
            113, 115 ,114,

            116, 118, 117,
            117, 118, 119,

            //treci:
            120, 121, 122,
            121, 123, 122,

            124, 125, 126,
            125, 127, 126,

            128, 129, 130,
            129, 131, 130,

            132, 133 ,134,
            133, 135 ,134,

            136, 138, 137,
            137, 138, 139,

            //cetvrti:
            140, 141, 142,
            141, 143, 142,

            144, 145, 146,
            145, 147, 146,

            148, 149, 150,
            149, 151, 150,

            152, 153 ,154,
            153, 155 ,154,

            156, 158, 157,
            157, 158, 159,

            //peti:
            160, 161, 162,
            161, 163, 162,

            164, 165, 166,
            165, 167, 166,

            168, 169, 170,
            169, 171, 170,

            172, 173 ,174,
            173, 175 ,174,

            176, 178, 177,
            177, 178, 179,

            //sesti:
            180, 181, 182,
            181, 183, 182,

            184, 185, 186,
            185, 187, 186,

            188, 189, 190,
            189, 191, 190,

            192, 193 ,194,
            193, 195 ,194,

            196, 198, 197,
            197, 198, 199,

            //sedmi:
            200, 201, 202,
            201, 203, 202,

            204, 205, 206,
            205, 207, 206,

            208, 209, 210,
            209, 211, 210,

            212, 213 ,214,
            213, 215 ,214,

            216, 218, 217,
            217, 218, 219,

            //osmi:
            220, 221, 222,
            221, 223, 222,

            224, 225, 226,
            225, 227, 226,

            228, 229, 230,
            229, 231, 230,

            232, 233 ,234,
            233, 235 ,234,

            236, 238, 237,
            237, 238, 239,

            //deveti:
            240, 241, 242,
            241, 243, 242,

            244, 245, 246,
            245, 247, 246,

            248, 249, 250,
            249, 251, 250,

            252, 253 ,254,
            253, 255 ,254,

            256, 258, 257,
            257, 258, 259,

            //deseti:
            260, 261, 262,
            261, 263, 262,

            264, 265, 266,
            265, 267, 266,

            268, 269, 270,
            269, 271, 270,

            272, 273 ,274,
            273, 275 ,274,

            276, 278, 277,
            277, 278, 279,

            //jedanaesti:
            280, 281, 282,
            281, 283, 282,

            284, 285, 286,
            285, 287, 286,

            288, 289, 290,
            289, 291, 290,

            292, 293 ,294,
            293, 295 ,294,

            296, 298, 297,
            297, 298, 299,

            //dvanaesti:
            300, 301, 302,
            301, 303, 302,

            304, 305, 306,
            305, 307, 306,

            308, 309, 310,
            309, 311, 310,

            312, 313 ,314,
            313, 315 ,314,

            316, 318, 317,
            317, 318, 319,

            //trinaesti:
            320, 321, 322,
            321, 323, 322,

            324, 325, 326,
            325, 327, 326,

            328, 329, 330,
            329, 331, 330,

            332, 333 ,334,
            333, 335 ,334,

            336, 338, 337,
            337, 338, 339,

            //cetrnaesti:
            340, 341, 342,
            341, 343, 342,

            344, 345, 346,
            345, 347, 346,

            348, 349, 350,
            349, 351, 350,

            352, 353 ,354,
            353, 355 ,354,

            356, 358, 357,
            357, 358, 359,

            //unutrasnji horizontalni zidovi:
            //prvi:
            360, 361, 362,
            361, 363, 362,

            364, 365, 366,
            365, 367, 366,

            368, 369, 370,
            369, 371, 370,

            372, 373 ,374,
            373, 375 ,374,

            376, 378, 377,
            377, 378, 379,

            //drugi:
            380, 381, 382,
            381, 383, 382,

            384, 385, 386,
            385, 387, 386,

            388, 389, 390,
            389, 391, 390,

            392, 393 ,394,
            393, 395 ,394,

            396, 398, 397,
            397, 398, 399,

            //treci:
            400, 401, 402,
            401, 403, 402,

            404, 405, 406,
            405, 407, 406,

            408, 409, 410,
            409, 411, 410,

            412, 413 ,414,
            413, 415 ,414,

            416, 418, 417,
            417, 418, 419,

            //cetvrti:
            420, 421, 422,
            421, 423, 422,

            424, 425, 426,
            425, 427, 426,

            428, 429, 430,
            429, 431, 430,

            432, 433 ,434,
            433, 435 ,434,

            436, 438, 437,
            437, 438, 439,

            //peti:
            440, 441, 442,
            441, 443, 442,

            444, 445, 446,
            445, 447, 446,

            448, 449, 450,
            449, 451, 450,

            452, 453 ,454,
            453, 455 ,454,

            456, 458, 457,
            457, 458, 459,

            //sesti:
            460, 461, 462,
            461, 463, 462,

            464, 465, 466,
            465, 467, 466,

            468, 469, 470,
            469, 471, 470,

            472, 473 ,474,
            473, 475 ,474,

            476, 478, 477,
            477, 478, 479,

            //sedmi:
            480, 481, 482,
            481, 483, 482,

            484, 485, 486,
            485, 487, 486,

            488, 489, 490,
            489, 491, 490,

            492, 493 ,494,
            493, 495 ,494,

            496, 498, 497,
            497, 498, 499,

            //osmi:
            500, 501, 502,
            501, 503, 502,

            504, 505, 506,
            505, 507, 506,

            508, 509, 510,
            509, 511, 510,

            512, 513 ,514,
            513, 515 ,514,

            516, 518, 517,
            517, 518, 519,

            //deveti:
            520, 521, 522,
            521, 523, 522,

            524, 525, 526,
            525, 525, 526,

            528, 529, 530,
            529, 531, 530,

            532, 533 ,534,
            533, 535 ,534,

            536, 538, 537,
            537, 538, 539,

            //deseti:
            540, 541, 542,
            541, 543, 542,

            544, 545, 546,
            545, 547, 546,

            548, 549, 550,
            549, 551, 550,

            552, 553 ,554,
            553, 555 ,554,

            556, 558, 557,
            557, 558, 559,

            //jedanaesti:
            560, 561, 562,
            561, 563, 562,

            564, 565, 566,
            565, 567, 566,

            568, 569, 570,
            569, 571, 570,

            572, 573 ,574,
            573, 575 ,574,

            576, 578, 577,
            577, 578, 579,

            //dvanaesti:
            580, 581, 582,
            581, 583, 582,

            584, 585, 586,
            585, 587, 586,

            588, 589, 590,
            589, 591, 590,

            592, 593 ,594,
            593, 595 ,594,

            596, 598, 597,
            597, 598, 599,

            //trinaesti:
            600, 601, 602,
            601, 603, 602,

            604, 605, 606,
            605, 607, 606,

            608, 609, 610,
            609, 611, 610,

            612, 613 ,614,
            613, 615 ,614,

            616, 618, 617,
            617, 618, 619,

            //cetrnaesti:
            620, 621, 622,
            621, 623, 622,

            624, 625, 626,
            625, 627, 626,

            628, 629, 630,
            629, 631, 630,

            632, 633 ,634,
            633, 635 ,634,

            636, 638, 637,
            637, 638, 639,

            //petnaesti:
            640, 641, 642,
            641, 643, 642,

            644, 645, 646,
            645, 647, 646,

            648, 649, 650,
            649, 651, 650,

            652, 653 ,654,
            653, 655 ,654,

            656, 658, 657,
            657, 658, 659,

            //sesnaesti:
            660, 661, 662,
            661, 663, 662,

            664, 665, 666,
            665, 667, 666,

            668, 669, 670,
            669, 671, 670,

            672, 673 ,674,
            673, 675 ,674,

            676, 678, 677,
            677, 678, 679,
    };

    float verticesBottom[] = {
            -1.0, -1.0, 0.0, 0.0, 0.0, 1.0, -1.0, -1.0,
            -1.0, 1.0, 0.0, 0.0, 0.0, 1.0, -1.0, 1.0,
            1.0, -1.0, 0.0, 0.0, 0.0, 1.0, 1.0, -1.0,
            1.0, 1.0, 0.0, 0.0, 0.0, 1.0, 1.0, 1.0
    };

    unsigned indicesBottom[] = {
            0, 2, 1,
            1, 2, 3
    };

    float verticesLight[] = {
            -0.17, -0.92, 1.0,
            -0.17, -0.92, 1.09,
            -0.17, -0.83, 1.0,
            -0.17, -0.83, 1.09,

            -0.17, -0.83, 1.0,
            -0.17, -0.83, 1.09,
            -0.08, -0.83, 1.0,
            -0.08, -0.83, 1.09,

            -0.08, -0.83, 1.0,
            -0.08, -0.83, 1.09,
            -0.08, -0.92, 1.0,
            -0.08, -0.92, 1.09,

            -0.08, -0.92, 1.0,
            -0.08, -0.92, 1.09,
            -0.17, -0.92, 1.0,
            -0.17, -0.92, 1.09,

            -0.17, -0.92, 1.0,
            -0.17, -0.83, 1.0,
            -0.08, -0.92, 1.0,
            -0.08, -0.83, 1.0,

            -0.17, -0.92, 1.09,
            -0.17, -0.83, 1.09,
            -0.08, -0.92, 1.09,
            -0.08, -0.83, 1.09,
    };

    unsigned indicesLight[] = {
            0, 1, 2,
            1, 3, 2,

            4, 5, 6,
            5, 7, 6,

            8, 9, 10,
            9, 11, 10,

            12, 13 ,14,
            13, 15 ,14,

            16, 17, 18,
            17, 19, 18,

            20, 22, 21,
            21, 22, 23,
    };

    float verticesPlayerCube[] = {
            -0.17, -0.92, 0.0, -1.0, 0.0, 0.0, 0.0, 0.0,
            -0.17, -0.92, 0.09, -1.0, 0.0, 0.0, 1.0, 0.0,
            -0.17, -0.83, 0.0, -1.0, 0.0, 0.0, 0.0, 1.0,
            -0.17, -0.83, 0.09, -1.0, 0.0, 0.0, 1.0, 1.0,

            -0.17, -0.83, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0,
            -0.17, -0.83, 0.09, 0.0, 1.0, 0.0, 0.0, 0.0,
            -0.08, -0.83, 0.0, 0.0, 1.0, 0.0, 1.0, 1.0,
            -0.08, -0.83, 0.09, 0.0, 1.0, 0.0, 1.0, 0.0,

            -0.08, -0.83, 0.0, 1.0, 0.0, 0.0, 1.0, 1.0,
            -0.08, -0.83, 0.09, 1.0, 0.0, 0.0, 0.0, 1.0,
            -0.08, -0.92, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0,
            -0.08, -0.92, 0.09, 1.0, 0.0, 0.0, 0.0, 0.0,

            -0.08, -0.92, 0.0, 0.0, -1.0, 0.0,  1.0, 0.0,
            -0.08, -0.92, 0.09, 0.0, -1.0, 0.0, 1.0, 1.0,
            -0.17, -0.92, 0.0, 0.0, -1.0, 0.0, 0.0, 0.0,
            -0.17, -0.92, 0.09, 0.0, -1.0, 0.0, 0.0, 1.0,

            -0.17, -0.92, 0.0, 0.0, 0.0, -1.0, 0.0, 0.0,
            -0.17, -0.83, 0.0, 0.0, 0.0, -1.0, 0.0, 1.0,
            -0.08, -0.92, 0.0, 0.0, 0.0, -1.0, 1.0, 0.0,
            -0.08, -0.83, 0.0, 0.0, 0.0, -1.0, 1.0, 1.0,

            -0.17, -0.92, 0.09, 0.0, 0.0, 1.0, 0.0, 0.0,
            -0.17, -0.83, 0.09, 0.0, 0.0, 1.0, 0.0, 1.0,
            -0.08, -0.92, 0.09, 0.0, 0.0, 1.0, 1.0, 0.0,
            -0.08, -0.83, 0.09, 0.0, 0.0, 1.0, 1.0, 1.0
    };


    unsigned indicesPlayerCube[] = {
            0, 1, 2,
            1, 3, 2,

            4, 5, 6,
            5, 7, 6,

            8, 9, 10,
            9, 11, 10,

            12, 13 ,14,
            13, 15 ,14,

            16, 18, 17,
            17, 18, 19,

            20, 22, 21,
            21, 22, 23,
    };

    float skyboxVertices[] = {
            // positions
            -1.0f,  1.0f, -1.0f,
            -1.0f, -1.0f, 1.0f,
            1.0f, -1.0f, -1.0f,
            1.0f, -1.0f, -1.0f,
            1.0f,  1.0f, -1.0f,
            -1.0f,  1.0f, -1.0f,

            -1.0f, -1.0f,  1.0f,
            -1.0f, -1.0f, -1.0f,
            -1.0f,  1.0f, -1.0f,
            -1.0f,  1.0f, -1.0f,
            -1.0f,  1.0f,  1.0f,
            -1.0f, -1.0f,  1.0f,

            1.0f, -1.0f, -1.0f,
            1.0f, -1.0f,  1.0f,
            1.0f,  1.0f,  1.0f,
            1.0f,  1.0f,  1.0f,
            1.0f,  1.0f, -1.0f,
            1.0f, -1.0f, -1.0f,

            -1.0f, -1.0f,  1.0f,
            -1.0f,  1.0f,  1.0f,
            1.0f,  1.0f,  1.0f,
            1.0f,  1.0f,  1.0f,
            1.0f, -1.0f,  1.0f,
            -1.0f, -1.0f,  1.0f,

            -1.0f,  1.0f, -1.0f,
            1.0f,  1.0f, -1.0f,
            1.0f,  1.0f,  1.0f,
            1.0f,  1.0f,  1.0f,
            -1.0f,  1.0f,  1.0f,
            -1.0f,  1.0f, -1.0f,

            -1.0f, -1.0f, -1.0f,
            -1.0f, -1.0f,  1.0f,
            1.0f, -1.0f, -1.0f,
            1.0f, -1.0f, -1.0f,
            -1.0f, -1.0f,  1.0f,
            1.0f, -1.0f,  1.0f
    };

    float transparentVertices[] = {
            -0.75, 0.76001, 0.0, 0.0, 1.0, 0.0,0.0, 0.0,
            -0.75, 0.76001, 0.3, 0.0, 1.0, 0.0,0.0, 1.0,
            -0.99, 0.76001, 0.0, 0.0, 1.0, 0.0,1.0, 0.0,
            -0.99, 0.76001, 0.3, 0.0, 1.0, 0.0,1.0, 1.0,

            -0.9899, 0.76, 0.0, 1.0, 0.0, 0.0,0.0, 0.0,
            -0.9899, 0.76, 0.3, 1.0, 0.0, 0.0,0.0, 1.0,
            -0.9899, 0.99, 0.0, 1.0, 0.0, 0.0,1.0, 0.0,
            -0.9899, 0.99, 0.3, 1.0, 0.0, 0.0,1.0, 1.0,

            -0.99, 0.9899, 0.0, 0.0, -1.0, 0.0,0.0, 0.0,
            -0.99, 0.9899, 0.3, 0.0, -1.0, 0.0,0.0, 1.0,
            -0.75, 0.9899, 0.0, 0.0, -1.0, 0.0,1.0, 0.0,
            -0.75, 0.9899, 0.3, 0.0, -1.0, 0.0,1.0, 1.0
    };

    unsigned transparentIndices[] = {
        0, 2, 1,
        1, 2, 3,

        4, 6, 5,
        5, 6, 7,

        8, 10, 9,
        9, 10, 11
    };

    //deo za pravljenje objekata u prozoru

    unsigned int VBO[5], VAO[5], EBO[5], tex[5];

    glGenVertexArrays(5, VAO);
    glGenBuffers(5, VBO);
    glGenBuffers(5, EBO);
    glGenTextures(5, tex);

    //lavirint
    glBindVertexArray(VAO[0]);
    glBindBuffer(GL_ARRAY_BUFFER, VBO[0]);

    glBufferData(GL_ARRAY_BUFFER, sizeof(verticesMaze), verticesMaze, GL_STATIC_DRAW);

    glBindBuffer(GL_ELEMENT_ARRAY_BUFFER, EBO[0]);
    glBufferData(GL_ELEMENT_ARRAY_BUFFER, sizeof(indicesMaze), indicesMaze, GL_STATIC_DRAW);

    glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 8*sizeof(float), (void*)0);
    glEnableVertexAttribArray(0);

    glVertexAttribPointer(1, 3, GL_FLOAT, GL_FALSE, 8*sizeof(float), (void*)(3*sizeof(float)));
    glEnableVertexAttribArray(1);

    glVertexAttribPointer(2, 2, GL_FLOAT, GL_FALSE, 8*sizeof(float), (void*)(6*sizeof(float)));
    glEnableVertexAttribArray(2);

    //deo za teksture
    glBindTexture(GL_TEXTURE_2D, tex[0]);

    //wrap
    glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_WRAP_S, GL_REPEAT);
    glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_WRAP_T, GL_REPEAT);

    //filter
    glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MIN_FILTER, GL_LINEAR);
    glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MAG_FILTER, GL_LINEAR);

    //load img
    int width0, height0, nChannel0;
    unsigned char *data = stbi_load("resources/textures/brickwall.jpg", &width0, &height0, &nChannel0, 0);
    if(data){
        glTexImage2D(GL_TEXTURE_2D, 0, GL_RGB, width0, height0, 0, GL_RGB, GL_UNSIGNED_BYTE, data);
        glGenerateMipmap(GL_TEXTURE_2D);
    }else{
        ASSERT(false, "Failed to load tex!\n");
    }
    stbi_image_free(data);

    shader.use();
    shader.setInt("t0", 0);





    //podloga
    glBindVertexArray(VAO[1]);
    glBindBuffer(GL_ARRAY_BUFFER, VBO[1]);

    glBufferData(GL_ARRAY_BUFFER, sizeof(verticesBottom), verticesBottom, GL_STATIC_DRAW);

    glBindBuffer(GL_ELEMENT_ARRAY_BUFFER, EBO[1]);
    glBufferData(GL_ELEMENT_ARRAY_BUFFER, sizeof(indicesBottom), indicesBottom, GL_STATIC_DRAW);

    glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 8*sizeof(float), (void*)0);
    glEnableVertexAttribArray(0);

    glVertexAttribPointer(1, 3, GL_FLOAT, GL_FALSE, 8*sizeof(float), (void*)(3*sizeof(float)));
    glEnableVertexAttribArray(1);

    glVertexAttribPointer(2, 2, GL_FLOAT, GL_FALSE, 8*sizeof(float), (void*)(6*sizeof(float)));
    glEnableVertexAttribArray(2);

    glBindBuffer(GL_ARRAY_BUFFER, 0);
    glBindVertexArray(0);

    glBindTexture(GL_TEXTURE_2D, tex[1]);

    //wrap
    glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_WRAP_S, GL_FILL);
    glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_WRAP_T, GL_FILL);

    //filter
    glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MIN_FILTER, GL_LINEAR);
    glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MAG_FILTER, GL_LINEAR);

    //load img
    int width1, height1, nChannel1;
    unsigned char* data1 = stbi_load("resources/textures/marble.jpg", &width1, &height1, &nChannel1, 0);
    if(data1){
        glTexImage2D(GL_TEXTURE_2D, 0, GL_RGB, width1, height1, 0, GL_RGB, GL_UNSIGNED_BYTE, data1);
        glGenerateMipmap(GL_TEXTURE_2D);
    }else{
        ASSERT(false, "Failed to load tex!\n");
    }
    stbi_image_free(data1);

    shader1.use();
    shader1.setInt("t1", 0);


    //svetlo

    glBindVertexArray(VAO[2]);
    glBindBuffer(GL_ARRAY_BUFFER, VBO[2]);

    glBufferData(GL_ARRAY_BUFFER, sizeof(verticesLight), verticesLight, GL_STATIC_DRAW);

    glBindBuffer(GL_ELEMENT_ARRAY_BUFFER, EBO[2]);
    glBufferData(GL_ELEMENT_ARRAY_BUFFER, sizeof(indicesLight), indicesLight, GL_STATIC_DRAW);

    glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3*sizeof(float), (void*)0);
    glEnableVertexAttribArray(0);



    //kocka igrac

    glBindVertexArray(VAO[3]);
    glBindBuffer(GL_ARRAY_BUFFER, VBO[3]);

    glBufferData(GL_ARRAY_BUFFER, sizeof(verticesPlayerCube), verticesPlayerCube, GL_STATIC_DRAW);

    glBindBuffer(GL_ELEMENT_ARRAY_BUFFER, EBO[3]);
    glBufferData(GL_ELEMENT_ARRAY_BUFFER, sizeof(indicesPlayerCube), indicesPlayerCube, GL_STATIC_DRAW);

    glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 8*sizeof(float), (void*)0);
    glEnableVertexAttribArray(0);

    glVertexAttribPointer(1, 3, GL_FLOAT, GL_FALSE, 8*sizeof(float), (void*)(3*sizeof(float)));
    glEnableVertexAttribArray(1);

    glVertexAttribPointer(2, 2, GL_FLOAT, GL_FALSE, 8*sizeof(float), (void*)(6*sizeof(float)));
    glEnableVertexAttribArray(2);

    glBindBuffer(GL_ARRAY_BUFFER, 0);
    glBindVertexArray(0);

    glBindTexture(GL_TEXTURE_2D, tex[3]);

    //wrap
    glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_WRAP_S, GL_FILL);
    glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_WRAP_T, GL_FILL);

    //filter
    glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MIN_FILTER, GL_LINEAR);
    glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MAG_FILTER, GL_LINEAR);

    //load img
    int width3, height3, nChannel3;
    stbi_set_flip_vertically_on_load(true);
    unsigned char* data3 = stbi_load("resources/textures/brickwall.jpg", &width3, &height3, &nChannel3, 0);
    if(data3){
        glTexImage2D(GL_TEXTURE_2D, 0, GL_RGB, width3, height3, 0, GL_RGB, GL_UNSIGNED_BYTE, data3);
        glGenerateMipmap(GL_TEXTURE_2D);
    }else{
        ASSERT(false, "Failed to load tex!\n");
    }
    stbi_image_free(data3);

    stbi_set_flip_vertically_on_load(false);
    shader3.use();
    shader3.setInt("t3", 0);


    unsigned int skyboxVAO, skyboxVBO;
    glGenVertexArrays(1, &skyboxVAO);
    glGenBuffers(1, &skyboxVBO);
    glBindVertexArray(skyboxVAO);
    glBindBuffer(GL_ARRAY_BUFFER, skyboxVBO);
    glBufferData(GL_ARRAY_BUFFER, sizeof(skyboxVertices), &skyboxVertices, GL_STATIC_DRAW);
    glEnableVertexAttribArray(0);
    glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), (void*)0);

    vector<std::string> faces
            {
                    FileSystem::getPath("resources/textures/skybox/right.jpg"),
                    FileSystem::getPath("resources/textures/skybox/left.jpg"),
                    FileSystem::getPath("resources/textures/skybox/top.jpg"),
                    FileSystem::getPath("resources/textures/skybox/bottom.jpg"),
                    FileSystem::getPath("resources/textures/skybox/front.jpg"),
                    FileSystem::getPath("resources/textures/skybox/back.jpg")
            };
    unsigned int cubemapTexture = loadCubemap(faces);

    skyboxShader.use();
    skyboxShader.setInt("skybox", 0);


    //deo za travu oko kraja lavirinta

    unsigned int transparentVAO, transparentVBO, transparentEBO;
    glGenVertexArrays(1, &transparentVAO);
    glGenBuffers(1, &transparentVBO);
    glGenBuffers(1, &transparentEBO);

    glBindVertexArray(transparentVAO);
    glBindBuffer(GL_ARRAY_BUFFER, transparentVBO);
    glBufferData(GL_ARRAY_BUFFER, sizeof(transparentVertices), transparentVertices, GL_STATIC_DRAW);
    glBindBuffer(GL_ELEMENT_ARRAY_BUFFER, transparentEBO);
    glBufferData(GL_ELEMENT_ARRAY_BUFFER, sizeof(transparentIndices), transparentIndices, GL_STATIC_DRAW);

    glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 8*sizeof(float), (void*)0);
    glEnableVertexAttribArray(0);

    glVertexAttribPointer(1, 3, GL_FLOAT, GL_FALSE, 8*sizeof(float), (void*)(3*sizeof(float)));
    glEnableVertexAttribArray(1);

    glVertexAttribPointer(2, 2, GL_FLOAT, GL_FALSE, 8*sizeof(float), (void*)(6*sizeof(float)));
    glEnableVertexAttribArray(2);

    glBindBuffer(GL_ARRAY_BUFFER, 0);
    glBindVertexArray(0);


    stbi_set_flip_vertically_on_load(true);
    unsigned int transparentTexture = loadTexture(FileSystem::getPath("resources/textures/grass.png").c_str());
    shaderBlending.use();
    shaderBlending.setInt("tTransparent", 0);

    //while petlja za renderovanje
    while(!glfwWindowShouldClose(window)){
        float currentFrame = glfwGetTime();
        deltaTime = currentFrame - lastFrame;
        lastFrame = currentFrame;

        update(window);

        glClearColor(0.1f, 0.1f, 0.1f, 1.0f);
        glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT);

        //pocetne promenljive za svetlo i prikaz
        glm::mat4 model      =  glm::mat4(1.0f);
        glm::mat4 modelLampa =  glm::mat4(1.0f);
        glm::mat4 view       =  programState->camera.GetViewMatrix();
        glm::mat4 projection =  glm::mat4(1.0f);
        projection = glm::perspective(glm::radians(programState->camera.Zoom), (float)800/800, 0.1f, 100.0f);

        glm::vec3 lightColor;
        lightColor.r = 1.0;//sin(glfwGetTime()*2.0f)+1; //1.0
        lightColor.g = 1.0;//(sin(glfwGetTime()*0.7f)+1)/2; //1.0
        lightColor.b = 1.0;//(sin(glfwGetTime()*1.3f)+1)/2; //1.0

        glm::vec3 diffuseColor = lightColor * glm::vec3(1.0f);
        glm::vec3 specularColor = lightColor * glm::vec3(0.3f);

        //dodeljivanje promenljivih za shader zidova lavirinta i crtanje
        shader.use();

        shader.setVec3("light.position", programState->camera.Position);
        shader.setVec3("viewPos", programState->camera.Position);

        shader.setVec3("light.direction", programState->camera.Front);
        shader.setFloat("light.cutOff", glm::cos(glm::radians(12.5f)));
        shader.setFloat("light.outerCutOff", glm::cos(glm::radians(17.5f)));

        shader.setVec3("light.ambient", programState->ambientRed, programState->ambientGreen, programState->ambientBlue);
        shader.setVec3("light.diffuse", diffuseColor);
        shader.setVec3("light.specular", specularColor);


        shader.setFloat("light.constant", 1.0f);
        shader.setFloat("light.linear", 0.035f);
        shader.setFloat("light.quadratic", 0.011f);

        shader.setFloat("material.shininess", 32.0f);

        shader.setMat4("model", model);
        shader.setMat4("view", view);
        shader.setMat4("projection", projection);

        shader.setInt("blinn", blinn);

        glBindVertexArray(VAO[0]);
        glActiveTexture(GL_TEXTURE0);
        glBindTexture(GL_TEXTURE_2D, tex[0]);
        glDrawElements(GL_TRIANGLES, 1020, GL_UNSIGNED_INT, 0);
        glBindVertexArray(0);

        //dodeljivanje promenljivih za shader podloge lavirinta i crtanje
        shader1.use();

        shader1.setVec3("light.position", programState->camera.Position);
        shader1.setVec3("viewPos", programState->camera.Position);

        shader1.setVec3("light.direction", programState->camera.Front);
        shader1.setFloat("light.cutOff", glm::cos(glm::radians(12.5f)));
        shader.setFloat("light.outerCutOff", glm::cos(glm::radians(17.5f)));

        shader1.setVec3("light.ambient", programState->ambientRed, programState->ambientGreen, programState->ambientBlue);
        shader1.setVec3("light.diffuse", diffuseColor);
        shader1.setVec3("light.specular", specularColor);

        shader1.setFloat("light.constant", 1.0f);
        shader1.setFloat("light.linear", 0.035f);
        shader1.setFloat("light.quadratic", 0.011f);

        shader1.setFloat("material.shininess", 32.0f);

        shader1.setMat4("model", model);
        shader1.setMat4("view", view);
        shader1.setMat4("projection", projection);

        shader1.setInt("blinn", blinn);

        glBindVertexArray(VAO[1]);
        glBindTexture(GL_TEXTURE_2D, tex[1]);
        glDrawElements(GL_TRIANGLES, 6, GL_UNSIGNED_INT, 0);
        glBindVertexArray(0);

        //dodeljivanje promenljivih za shader kao svetla i crtanje
        shader2.use();

        shader2.setMat4("model", modelIgraca);
        shader2.setMat4("view", view);
        shader2.setMat4("projection", projection);
        shader2.setVec3("lightColor", lightColor);

        glBindVertexArray(VAO[2]);
        glDrawElements(GL_TRIANGLES, 36, GL_UNSIGNED_INT, 0);

        //dodeljivanje promenljivih za shader igraca i crtanje
        shader3.use();

        shader3.setVec3("light.position", programState->camera.Position);
        shader3.setVec3("viewPos", programState->camera.Position);

        shader3.setVec3("light.direction", programState->camera.Front);
        shader3.setFloat("light.cutOff", glm::cos(glm::radians(12.5f)));
        shader3.setFloat("light.outerCutOff", glm::cos(glm::radians(17.5f)));

        shader3.setVec3("light.ambient", programState->ambientRed, programState->ambientGreen, programState->ambientBlue);
        shader3.setVec3("light.diffuse", diffuseColor);
        shader3.setVec3("light.specular", specularColor);

        shader3.setFloat("light.constant", 1.0f);
        shader3.setFloat("light.linear", 0.035f);
        shader3.setFloat("light.quadratic", 0.011f);

        shader3.setFloat("material.shininess", 32.0f);

        shader3.setMat4("model", modelIgraca);
        shader3.setMat4("view", view);
        shader3.setMat4("projection", projection);

        shader3.setInt("blinn", blinn);

        glBindVertexArray(VAO[3]);
        glBindTexture(GL_TEXTURE_2D, tex[3]);
        glDrawElements(GL_TRIANGLES, 36, GL_UNSIGNED_INT, 0);
        glBindVertexArray(0);

        //transformacije i crtanje modela
        modelLampa = glm::translate(modelLampa, glm::vec3(-0.875f, 0.875f, 0.05f));
        modelLampa = glm::scale(modelLampa, glm::vec3(0.017, 0.017, 0.017));
        modelLampa = glm::rotate(modelLampa, (float)glfwGetTime(), glm::vec3(0, 0, 1.0));
        shaderModel.setMat4("model", modelLampa);
        shaderModel.setMat4("view", view);
        shaderModel.setMat4("projection", projection);

        ourModel.Draw(shaderModel);

        //crtanje discard blendovane trave oko kraja lavirinta
        shaderBlending.use();

        shaderBlending.setVec3("light.position", programState->camera.Position);
        shaderBlending.setVec3("viewPos", programState->camera.Position);

        shaderBlending.setVec3("light.direction", programState->camera.Front);
        shaderBlending.setFloat("light.cutOff", glm::cos(glm::radians(12.5f)));
        shaderBlending.setFloat("light.outerCutOff", glm::cos(glm::radians(17.5f)));

        shaderBlending.setVec3("light.ambient", programState->ambientRed, programState->ambientGreen, programState->ambientBlue);
        shaderBlending.setVec3("light.diffuse", diffuseColor);
        shaderBlending.setVec3("light.specular", specularColor);

        shaderBlending.setFloat("light.constant", 1.0f);
        shaderBlending.setFloat("light.linear", 0.035f);
        shaderBlending.setFloat("light.quadratic", 0.011f);

        shaderBlending.setFloat("material.shininess", 32.0f);
        shaderBlending.setInt("blinn", blinn);

        shaderBlending.setMat4("model", model);
        shaderBlending.setMat4("view", view);
        shaderBlending.setMat4("projection", projection);
        glBindVertexArray(transparentVAO);
        glBindTexture(GL_TEXTURE_2D, transparentTexture);
        glDrawElements(GL_TRIANGLES, 18, GL_UNSIGNED_INT, 0);
        glBindVertexArray(0);


        //crtanje skyboxa
        glBindVertexArray(0);
        glDepthFunc(GL_LEQUAL);// change depth function so depth test passes when values are equal to depth buffer's content
        skyboxShader.use();
        glm::mat4 view1 = programState->camera.GetViewMatrix();
        skyboxShader.setMat4("view", glm::mat4(glm::mat3(view1)));
        skyboxShader.setMat4("projection", projection);
        glm::mat4 modelSkybox = glm::mat4(1.0f);
        modelSkybox = glm::rotate(modelSkybox, 90.0f, glm::vec3(1.0, 0.0, 0.0));
        skyboxShader.setMat4("model", modelSkybox);
        // skybox cube
        glBindVertexArray(skyboxVAO);
        glActiveTexture(GL_TEXTURE0);
        glBindTexture(GL_TEXTURE_CUBE_MAP, cubemapTexture);
        glDrawArrays(GL_TRIANGLES, 0, 36);
        glBindVertexArray(0);
        glDepthFunc(GL_LESS); // set depth function back to default

        //uslov za prikaz imgui konzole
        if(programState->ImGuiEnabled)
            DrawImGui(programState);

        glfwSwapBuffers(window);
        glfwPollEvents();
    }

    programState->SaveToFile("resources/programState.txt");

    glDeleteVertexArrays(4, VAO);
    glDeleteBuffers(4, VBO);
    glDeleteBuffers(4, EBO);
    glDeleteVertexArrays(1, &skyboxVAO);
    glDeleteBuffers(1, &skyboxVBO);

    ImGui_ImplOpenGL3_Shutdown();
    ImGui_ImplGlfw_Shutdown();
    ImGui::DestroyContext();

    delete programState;

    glfwTerminate();

    return 0;
}
void framebuffer_size_callback(GLFWwindow* window, int width, int height){
    glViewport(0, 0, width, height);
}
void update(GLFWwindow* window) {

    if(programState->camera.Position.x < -0.77 && programState->camera.Position.x > -1.0 && programState->camera.Position.y > 0.75 && programState->camera.Position.y < 1.0){
        glfwSetWindowShouldClose(window, true);
        std::cout <<"Lampa je pronadjena! :)\n" << glfwGetTime() << "s\n";
    }

    if (glfwGetKey(window, GLFW_KEY_R) == GLFW_PRESS) {
        programState->camera.Position = modelIgraca * glm::vec4(-0.125, -0.8725, 1.0, 1.0);
        programState->camera.WorldUp = glm::vec3(0.0f, 1.0f, 0.0f);
        programState->camera.Front = glm::vec3(0.0f, 0.0f, -1.0f);
        programState->camera.Zoom = 45.0f;
        programState->camera.Yaw = programState->camera.firstYaw;
        programState->camera.Pitch = 0.0f;
        programState->camera.Up = glm::vec3(0.0f, 1.0f, 0.0f);
        programState->camera.ProcessMouseMovement(0, 0);
        std::cerr << "Reset\n";
    }

    if (glfwGetKey(window, GLFW_KEY_W) == GLFW_PRESS) {
        //pomeramo igraca za jedno mesto gore
        programState->camera.Position += glm::vec3(0, 0.005, 0);
        modelIgraca = glm::translate(modelIgraca, glm::vec3(0.0, 0.005, 0.0));
    }
    if (glfwGetKey(window, GLFW_KEY_A) == GLFW_PRESS) {
        //pomeramo igraca za jedno mesto levo
        //camera.ProcessKeyboard(LEFT, deltaTime);
        programState->camera.Position += glm::vec3(-0.005, 0, 0);
        modelIgraca = glm::translate(modelIgraca, glm::vec3(-0.005, 0.0, 0.0));
    }
    if (glfwGetKey(window, GLFW_KEY_S) == GLFW_PRESS) {
        //pomeramo igraca za jedno mesto dole
        programState->camera.Position += glm::vec3(0, -0.005, 0);
        modelIgraca = glm::translate(modelIgraca, glm::vec3(0.0, -0.005, 0.0));
    }
    if (glfwGetKey(window, GLFW_KEY_D) == GLFW_PRESS) {
        //pomeramo igraca za jedno mesto desno
        programState->camera.Position += glm::vec3(0.005, 0, 0);
        modelIgraca = glm::translate(modelIgraca, glm::vec3(0.005, 0.0, 0.0));
    }
    if (glfwGetKey(window, GLFW_KEY_UP) == GLFW_PRESS)
        programState->camera.ProcessKeyboard(UP, deltaTime);
    if (glfwGetKey(window, GLFW_KEY_DOWN) == GLFW_PRESS)
        programState->camera.ProcessKeyboard(DOWN, deltaTime);
    if (glfwGetKey(window, GLFW_KEY_LEFT) == GLFW_PRESS)
        programState->camera.ProcessKeyboard(LEFT, deltaTime);
    if (glfwGetKey(window, GLFW_KEY_RIGHT) == GLFW_PRESS)
        programState->camera.ProcessKeyboard(RIGHT, deltaTime);
    if (glfwGetKey(window, GLFW_KEY_E) == GLFW_PRESS)
        programState->camera.ProcessKeyboard(FORWARD, deltaTime);
    if (glfwGetKey(window, GLFW_KEY_Q) == GLFW_PRESS)
        programState->camera.ProcessKeyboard(BACKWARD, deltaTime);
    if (glfwGetKey(window, GLFW_KEY_P) == GLFW_PRESS)
        blinn = false;
    if (glfwGetKey(window, GLFW_KEY_B) == GLFW_PRESS)
        blinn = true;
    if(programState->ImGuiEnabled == false)
        programState->CameraMouseMovementUpdateEnabled=false;
}
void mouse_callback(GLFWwindow* window, double xposIn, double yposIn){
    float xpos = static_cast<float>(xposIn);
    float ypos = static_cast<float>(yposIn);

    if (firstMouse)
    {
        lastX = xpos;
        lastY = ypos;
        firstMouse = false;
    }

    float xoffset = xpos - lastX;
    float yoffset = lastY - ypos; // reversed since y-coordinates go from bottom to top

    lastX = xpos;
    lastY = ypos;

    if(programState->CameraMouseMovementUpdateEnabled)
        programState->camera.ProcessMouseMovement(xoffset, yoffset);
}
void scroll_callback(GLFWwindow* window, double xoffset, double yoffset){

    programState->camera.ProcessMouseScroll(static_cast<float>(yoffset));
}
void DrawImGui(ProgramState* programState) {
    ImGui_ImplOpenGL3_NewFrame();
    ImGui_ImplGlfw_NewFrame();
    ImGui::NewFrame();
    {

            ImGui::Begin("Ambientalno osvetljenje:");
            ImGui::Text("RGB slajderi za ambijentalno osvetljenje");
            ImGui::DragFloat("Slider za R: ", (float*)&programState->ambientRed, 0.05f, 0.0f, 1.0f);
            ImGui::DragFloat("Slider za G: ", (float*)&programState->ambientGreen, 0.05f, 0.0f, 1.0f);
            ImGui::DragFloat("Slider za B: ", (float*)&programState->ambientBlue, 0.05f, 0.0f, 1.0f);
            ImGui::End();
    }
    {
        ImGui::Begin("Camera info:");
        ImGui::Text("Camera position: (%f, %f, %f)", programState->camera.Position.x, programState->camera.Position.y, programState->camera.Position.z);
        ImGui::Text("Camera pitch: %f", programState->camera.Pitch);
        ImGui::Text("Camera yaw: %f", programState->camera.Yaw);
        ImGui::Text("Camera front: (%f, %f, %f)", programState->camera.Front.x, programState->camera.Front.y, programState->camera.Front.z);
        ImGui::Checkbox("Camera movement enabled:", &programState->CameraMouseMovementUpdateEnabled);
        ImGui::End();
    }

    ImGui::Render();
    ImGui_ImplOpenGL3_RenderDrawData(ImGui::GetDrawData());
}
void key_callback(GLFWwindow *window, int key, int scancode, int action, int mods) {
    if (key == GLFW_KEY_ESCAPE && action == GLFW_PRESS)
        glfwSetWindowShouldClose(window, true);

    if(key == GLFW_KEY_P && action == GLFW_PRESS) {
        std::cout << "Phong\n";
    }
    if(key == GLFW_KEY_B && action == GLFW_PRESS) {
        std::cout << "Blinn\n";
    }
    if(key == GLFW_KEY_F1 && action == GLFW_PRESS) {
        programState->ImGuiEnabled = !programState->ImGuiEnabled;
        if(programState->ImGuiEnabled){
            glfwSetInputMode(window, GLFW_CURSOR, GLFW_CURSOR_NORMAL);
        }else{
            glfwSetInputMode(window, GLFW_CURSOR, GLFW_CURSOR_DISABLED);
        }
    }
}
unsigned int loadCubemap(vector<std::string> faces)
{
    unsigned int textureID;
    glGenTextures(1, &textureID);
    glBindTexture(GL_TEXTURE_CUBE_MAP, textureID);

    int width, height, nrChannels;
    for (unsigned int i = 0; i < faces.size(); i++)
    {
        unsigned char *data7 = stbi_load(faces[i].c_str(), &width, &height, &nrChannels, 0);
        if (data7)
        {
            glTexImage2D(GL_TEXTURE_CUBE_MAP_POSITIVE_X + i, 0, GL_RGB, width, height, 0, GL_RGB, GL_UNSIGNED_BYTE, data7);
            stbi_image_free(data7);
        }
        else
        {
            std::cout << "Cubemap texture failed to load at path: " << faces[i] << std::endl;
            stbi_image_free(data7);
        }
    }
    glTexParameteri(GL_TEXTURE_CUBE_MAP, GL_TEXTURE_MIN_FILTER, GL_LINEAR);
    glTexParameteri(GL_TEXTURE_CUBE_MAP, GL_TEXTURE_MAG_FILTER, GL_LINEAR);
    glTexParameteri(GL_TEXTURE_CUBE_MAP, GL_TEXTURE_WRAP_S, GL_CLAMP_TO_EDGE);
    glTexParameteri(GL_TEXTURE_CUBE_MAP, GL_TEXTURE_WRAP_T, GL_CLAMP_TO_EDGE);
    glTexParameteri(GL_TEXTURE_CUBE_MAP, GL_TEXTURE_WRAP_R, GL_CLAMP_TO_EDGE);

    return textureID;
}
unsigned int loadTexture(char const * path)
{
    unsigned int textureID;
    glGenTextures(1, &textureID);

    int width, height, nrComponents;
    unsigned char *data = stbi_load(path, &width, &height, &nrComponents, 0);
    if (data)
    {
        GLenum format;
        if (nrComponents == 1)
            format = GL_RED;
        else if (nrComponents == 3)
            format = GL_RGB;
        else if (nrComponents == 4)
            format = GL_RGBA;

        glBindTexture(GL_TEXTURE_2D, textureID);
        glTexImage2D(GL_TEXTURE_2D, 0, format, width, height, 0, format, GL_UNSIGNED_BYTE, data);
        glGenerateMipmap(GL_TEXTURE_2D);

        glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_WRAP_S, format == GL_RGBA ? GL_CLAMP_TO_EDGE : GL_REPEAT); // for this tutorial: use GL_CLAMP_TO_EDGE to prevent semi-transparent borders. Due to interpolation it takes texels from next repeat
        glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_WRAP_T, format == GL_RGBA ? GL_CLAMP_TO_EDGE : GL_REPEAT);
        glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MIN_FILTER, GL_LINEAR_MIPMAP_LINEAR);
        glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MAG_FILTER, GL_LINEAR);

        stbi_image_free(data);
    }
    else
    {
        std::cout << "Texture failed to load at path: " << path << std::endl;
        stbi_image_free(data);
    }

    return textureID;
}